% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_g_regression.R
\name{tm_g_regression}
\alias{tm_g_regression}
\title{Scatterplot and Regression Model}
\usage{
tm_g_regression(label = "Regression Analysis", regressor, response,
  plot_height = c(600, 200, 2000), pre_output = NULL,
  post_output = NULL)
}
\arguments{
\item{regressor}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
regressor variable from an incoming dataset with filtering and selecting.}

\item{response}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
response variable from an incoming dataset with filtering and selecting.}

\item{plot_height}{(\code{numeric}) a vector of length three with \code{c(value, min and max)} for a slider
encoding the plot height.}

\item{pre_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}

\item{post_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}
}
\description{
Scatterplot and Regression Model
}
\examples{
# datasets: same wide
# Regression graphs from selected response variable (BMRKR1) and
# selected regressors (AGE)
library(random.cdisc.data)

ADSL <- cadsl

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL", ADSL),
    code = "ADSL <- cadsl",
    check = TRUE
  ),
  modules = root_modules(
    tm_g_regression(
      label = "Regression",
      response = data_extract_spec(
        dataname = "ADSL",
        select = select_spec(
          label = "Select variable:",
          choices = c("BMRKR1", "BMRKR2"),
          selected = "BMRKR1",
          multiple = FALSE,
          fixed = FALSE
        )
      ),
      regressor = data_extract_spec(
        dataname = "ADSL",
        select = select_spec(
          label = "Select variables:",
          choices = c("AGE", "SEX", "RACE"),
          selected = "AGE",
          multiple = TRUE,
          fixed = FALSE
        )
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: different wide
# Regression of BMRKR1 by AGE + RACE
library(random.cdisc.data)
library(dplyr)

ADSL <- cadsl
ADSL <- mutate_at(ADSL,
                 .vars = vars(c("ARM", "ACTARM", "ACTARMCD", "SEX", "STRATA1", "STRATA2")),
                 .funs = list(~as.factor(.))) \%>\% select("ARM", "ACTARM", "ACTARMCD",
 "SEX", "AGE", "USUBJID", "STUDYID", "BMRKR1", "BMRKR2")
ADSL_2 <- mutate_at(cadsl,
                 .vars = vars(c("ARM", "ACTARM", "ACTARMCD", "SEX", "STRATA1", "STRATA2")),
                 .funs = list(~as.factor(.))) \%>\% select("ACTARM", "AGE", "STRATA2", "COUNTRY",
                 "USUBJID", "STUDYID")

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL", ADSL),
    dataset("ADSL_2", ADSL_2),
    code = 'ADSL <- cadsl
            ADSL <- mutate_at(ADSL,
                 .vars = vars(c("ARM", "ACTARM", "ACTARMCD", "SEX", "STRATA1", "STRATA2")),
                 .funs = list(~as.factor(.))) \%>\% select("ARM", "ACTARM", "ACTARMCD",
                     "SEX", "STRATA1", "AGE", "USUBJID", "STUDYID", "STRATA2")
            ADSL_2 <- mutate_at(cadsl,
                 .vars = vars(c("ARM", "ACTARM", "ACTARMCD", "SEX", "STRATA1", "STRATA2")),
                 .funs = list(~as.factor(.))) \%>\% select("ACTARM", "AGE", "STRATA2",
                 "COUNTRY", "USUBJID", "STUDYID")',
    check = FALSE #TODO
  ),
  modules = root_modules(
    tm_g_regression(
      label = "Regression",
      response = data_extract_spec(
        dataname = "ADSL",
        select = select_spec(
          label = "Select variable:",
          choices = c("BMRKR1", "BMRKR2"),
          selected = "BMRKR1",
          multiple = FALSE,
          fixed = FALSE
        )
      ),
      regressor = data_extract_spec(
        dataname = "ADSL_2",
        select = select_spec(
          label = "Select variables:",
          choices = c("AGE", "RACE", "COUNTRY"),
          selected = c("AGE", "RACE"),
          multiple = TRUE,
          fixed = FALSE
        )
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: same long
# Examine linear relationship between responses of different parameters

library(random.cdisc.data)

ADSL <- cadsl
ADRS <- cadrs

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL", ADSL),
    cdisc_dataset("ADRS", ADRS),
    code = "ADSL <- cadsl; ADRS <- cadrs",
    check = TRUE
  ),
  modules = root_modules(
    tm_g_regression(
      label = "Regression",
      response = data_extract_spec(
        dataname = "ADRS",
        filter = list(
          filter_spec(
            vars = "PARAM",
            choices = levels(ADRS$PARAM),
            selected = levels(ADRS$PARAM)[1],
            multiple = FALSE,
            label = "Select measurement:"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ADRS$AVISIT),
            selected = levels(ADRS$AVISIT)[1],
            multiple = FALSE,
            label = "Select visit:"
          )
        ),
        select = select_spec(
          choices = "AVAL",
          selected = "AVAL",
          multiple = FALSE,
          fixed = FALSE,
          label = "Select variable:"
        )
      ),
      regressor = data_extract_spec(
        dataname = "ADRS",
        filter = list(
          filter_spec(
            vars = "PARAM",
            choices = levels(ADRS$PARAM),
            selected = levels(ADRS$PARAM)[1:2],
            multiple = TRUE,
            label = "Select measurements:"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ADRS$AVISIT),
            selected = levels(ADRS$AVISIT)[2],
            multiple = TRUE,
            label = "Select visits:"
          )
        ),
        select = select_spec(
          choices = "AVAL",
          selected = "AVAL",
          multiple = FALSE,
          fixed = FALSE,
          label = "Select variable:"
        )
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: multiple long datasets
# Regression plots from model of different parameters from ADRS or ADTTE datasets
library(random.cdisc.data)

ADSL <- cadsl
ADRS <- cadrs
ADTTE <- cadtte

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL", ADSL),
    cdisc_dataset("ADRS", ADRS),
    cdisc_dataset("ADTTE", ADTTE),
    code = "ADSL <- cadsl; ADRS <- cadrs; ADTTE <- cadtte",
    check = TRUE
  ),
  modules = root_modules(
    tm_g_regression(
      label = "Regression Analysis on two long datasets",
      response = data_extract_spec(
        dataname = "ADTTE",
        select = select_spec(
          label = "Select variable:",
          choices = c("AVAL", "CNSR"),
          selected = "AVAL",
          multiple = FALSE,
          fixed = FALSE
        ),
        filter = filter_spec(
          label = "Select parameter:",
          vars = c("PARAMCD"),
          choices = unique(ADTTE$PARAMCD),
          selected = "OS",
          multiple = FALSE
        )
      ),
      regressor = list(
        data_extract_spec(
          dataname = "ADRS",
          select = select_spec(
            label = "Select variables:",
            choices = names(ADRS),
            selected = "AVAL",
            multiple = TRUE,
            fixed = FALSE
          ),
          filter = filter_spec(
            label = "Select endpoints:",
            vars = c("PARAMCD", "AVISIT"),
            choices = apply(expand.grid(
            levels(ADRS$PARAMCD), levels(ADRS$AVISIT)), 1, paste, collapse = " - "),
            selected = "OVRINV - Screening",
            multiple = TRUE
          )
        ),
        data_extract_spec(
          dataname = "ADSL",
          select = select_spec(
            label = "Select variables:",
            choices = c("BMRKR1", "BMRKR2"),
            selected = "BMRKR1",
            multiple = TRUE,
            fixed = FALSE
          )
        )
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: wide and long
# Regression of lab measurement (ADLB$AVAL) by
#   patient age (ADSL$AGE)
library(random.cdisc.data)

ADSL <- cadsl
ADLB <- cadlb

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL", ADSL),
    cdisc_dataset("ADLB", ADLB),
    code = "ADSL <- cadsl; ADLB <- cadlb",
    check = TRUE
  ),
  modules = root_modules(
    tm_g_regression(
      label = "Regression",
      response = data_extract_spec(
        dataname = "ADLB",
        filter = list(
          filter_spec(
            vars = "PARAM",
            choices = levels(ADLB$PARAM),
            selected = levels(ADLB$PARAM)[1],
            multiple = FALSE,
            label = "Select measurement:"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ADLB$AVISIT),
            selected = levels(ADLB$AVISIT)[1],
            multiple = FALSE,
            label = "Select visit:"
          )
        ),
        select = select_spec(
          label = "Select variable:",
          choices = "AVAL",
          selected = "AVAL",
          multiple = FALSE,
          fixed = TRUE
        )
      ),
      regressor = data_extract_spec(
        dataname = "ADSL",
        select = select_spec(
          label = "Select variables:",
          choices = c("BMRKR1", "BMRKR2", "AGE"),
          selected = "AGE",
          multiple = TRUE,
          fixed = FALSE
        )
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: wide, long, long

library(random.cdisc.data)

ADSL <- cadsl
ADLB <- cadlb
ADRS <- cadrs

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL", ADSL),
    cdisc_dataset("ADLB", ADLB),
    cdisc_dataset("ADRS", ADRS),
    code = "ADSL <- cadsl; ADLB <- cadlb; ADRS <- cadrs",
    check = TRUE
  ),
  modules = root_modules(
    tm_g_regression(
      label = "Regression",
      response = list(data_extract_spec(
        dataname = "ADLB",
        filter = list(
          filter_spec(
            vars = "PARAM",
            choices = levels(ADLB$PARAM),
            selected = levels(ADLB$PARAM)[1],
            multiple = FALSE,
            label = "Select measurement:"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ADLB$AVISIT),
            selected = levels(ADLB$AVISIT)[1],
            multiple = FALSE,
            label = "Select visit:"
          )
        ),
        select = select_spec(
          choices = "AVAL",
          selected = "AVAL",
          multiple = FALSE,
          fixed = FALSE,
          label = "Select variable:"
        )
      ),
      data_extract_spec(
        dataname = "ADRS",
        filter = list(
          filter_spec(
            vars = "ARMCD",
            choices = levels(ADRS$ARMCD),
            selected = levels(ADRS$ARMCD)[1],
            multiple = FALSE,
            label = "Select ARM:"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ADRS$AVISIT),
            selected = levels(ADRS$AVISIT)[1],
            multiple = FALSE,
            label = "Select visit:"
          )
        ),
        select = select_spec(
          choices = "AVAL",
          selected = "AVAL",
          multiple = FALSE,
          fixed = FALSE
        )
      )),
      regressor = data_extract_spec(
        dataname = "ADSL",
        select = select_spec(
          choices = c("BMRKR1", "BMRKR2"),
          selected = c("BMRKR1"),
          multiple = TRUE,
          fixed = FALSE
        )
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: different subsets of long dataset
# Examine linear relationship between different lab measurements

library(random.cdisc.data)

ADSL <- cadsl
ADLB <- cadlb

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL", ADSL),
    cdisc_dataset("ADLB", ADLB),
    code = "ADSL <- cadsl; ADLB <- cadlb",
    check = TRUE
  ),
  modules = root_modules(
    tm_g_regression(
      label = "Regression",
      response = data_extract_spec(
        dataname = "ADLB",
        filter = list(
          filter_spec(
            vars = "PARAMCD",
            choices = levels(ADLB$PARAMCD),
            selected = levels(ADLB$PARAMCD)[1],
            multiple = FALSE,
            label = "Select lab:"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ADLB$AVISIT),
            selected = levels(ADLB$AVISIT)[1],
            multiple = FALSE,
            label = "Select visit:"
          )
        ),
        select = select_spec(
          choices = "AVAL",
          selected = "AVAL",
          multiple = FALSE,
          fixed = TRUE
        )
      ),
      regressor = data_extract_spec(
        dataname = "ADLB",
        filter = list(
          filter_spec(
            vars = "PARAMCD",
            choices = levels(ADLB$PARAMCD),
            selected = levels(ADLB$PARAMCD)[2:3],
            multiple = TRUE,
            label = "Select labs:"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ADLB$AVISIT),
            selected = levels(ADLB$AVISIT)[1],
            multiple = FALSE,
            label = "Select visit:"
          )
        ),
        select = select_spec(
          choices = "AVAL",
          selected = "AVAL",
          multiple = FALSE,
          fixed = TRUE
        )
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}
}
