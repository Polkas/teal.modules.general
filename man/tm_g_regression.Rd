% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_g_regression.R
\name{tm_g_regression}
\alias{tm_g_regression}
\title{Scatterplot and Regression Model}
\usage{
tm_g_regression(label = "Regression Analysis", dataname, regressor,
  response, plot_height = c(600, 200, 2000), pre_output = NULL,
  post_output = NULL)
}
\arguments{
\item{label}{label shown in the navigation for the item}

\item{dataname}{name of datasets used to generate the regression plot (just used for labeling)}

\item{regressor}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
regressor variable from an incoming dataset with filtering and selecting.}

\item{response}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
response variable from an incoming dataset with filtering and selecting.}

\item{plot_height}{(\code{numeric}) a vector of length three with \code{c(value, min and max)} for a slider
encoding the plot height.}

\item{pre_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}

\item{post_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}
}
\description{
Scatterplot and Regression Model
}
\examples{
library(random.cdisc.data)
library(tern)

# datasets: wide and long

ASL <- cadsl
ALB <- cadlb

keys(ASL) <- c("STUDYID", "USUBJID")
keys(ALB) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")

app <- init(
  data = cdisc_data(
    ASL = ASL,
    ALB = ALB,
    code = 'ASL <- cadsl
            ALB <- cadlb
            keys(ASL) <- c("STUDYID", "USUBJID")
            keys(ALB) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")',
    check = FALSE),
  modules = root_modules(
    tm_g_regression(
      label = "Regression",
      dataname = c("ASL", "ALB"),
      response = data_extract_spec(
        dataname = "ALB",
        filter = list(
          filter_spec(
            vars = "PARAMCD",
            choices = levels(ALB$PARAMCD),
            selected = levels(ALB$PARAMCD)[1],
            multiple = FALSE,
            label = "Choose endpoint"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ALB$AVISIT),
            selected = levels(ALB$AVISIT)[1],
            multiple = FALSE,
            label = "Choose endpoint"
          )
        ),
        columns = columns_spec(
          choices = "AVAL",
          selected = "AVAL",
          multiple = FALSE,
          fixed = FALSE,
          label = "variable"
        )
      ),
      regressor = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(
          choices = c("BMRKR1", "BMRKR2"),
          selected = c("BMRKR1"),
          multiple = FALSE,
          fixed = FALSE
        )
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: multiple long datasets
library(random.cdisc.data)

ASL <- cadsl
ADRS <- cadrs
ADTTE <- cadtte

app <- init(
  data = cdisc_data(
    ASL = ASL,
    ADRS = ADRS,
    ADTTE = ADTTE,
    code = "ASL <- cadsl; ADRS <- cadrs; ADTTE <- cadtte",
    check = FALSE
  ),
  modules = root_modules(
    tm_g_regression(
      label = "Regression Analysis on two long datasets",
      dataname = c("ASL", "ADRS", "ADTTE"),
      response = data_extract_spec(
        dataname = "ADTTE",
        columns = columns_spec(
          choices = c("AVAL", "CNSR"),
          selected = "AVAL",
          multiple = FALSE,
          fixed = FALSE
        ),
        filter = filter_spec(
          vars = c("PARAMCD"),
          choices = unique(ADTTE$PARAMCD),
          selected = "OS",
          multiple = FALSE,
          label = "ADTTE filter"
        )
      ),
      regressor = list(
        data_extract_spec(
          dataname = "ADRS",
          columns = columns_spec(
            choices = names(ADRS),
            selected = "AVAL",
            multiple = TRUE,
            fixed = FALSE
          ),
          filter = filter_spec(
            vars = c("PARAMCD", "AVISIT"),
            choices = apply(expand.grid(unique(ADRS$PARAMCD), unique(ADRS$AVISIT)), 1, paste, collapse = " - "),
            selected = "OVRINV - Screening",
            multiple = TRUE,
            label = "ADRS filter"
          )
        ),
        data_extract_spec(
          dataname = "ASL",
          columns = columns_spec(
            choices = c("BMRKR1", "BMRKR2"),
            selected = c("BMRKR1"),
            multiple = TRUE,
            fixed = FALSE
          )
        )
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: different subsets of long dataset

library(random.cdisc.data)
library(tern)

ASL <- cadsl
ADLB <- cadlb

keys(ASL) <- c("STUDYID", "USUBJID")
keys(ADLB) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")

app <- init(
  data = cdisc_data(
    ASL = ASL,
    ADLB = ADLB,
    code = 'ASL <- cadsl
            ADLB <- cadlb
            keys(ASL) <- c("STUDYID", "USUBJID")
            keys(ADLB) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")',
    check = FALSE),
  modules = root_modules(
    tm_g_regression(
      label = "Regression",
      dataname = "ADLB",
      response = data_extract_spec(
        dataname = "ADLB",
        filter = list(
          filter_spec(
            vars = "PARAMCD",
            choices = levels(ADLB$PARAMCD),
            selected = levels(ADLB$PARAMCD)[1],
            multiple = FALSE,
            label = "Choose endpoint"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ADLB$AVISIT),
            selected = levels(ADLB$AVISIT)[1],
            multiple = FALSE,
            label = "Choose visit"
          )
        ),
        columns = columns_spec(
          choices = c("AVAL", "CHG"),
          selected = "AVAL",
          multiple = FALSE,
          fixed = FALSE,
          label = "Variable"
        )
      ),
      regressor = data_extract_spec(
        dataname = "ADLB",
        filter = list(
          filter_spec(
            vars = "PARAMCD",
            choices = levels(ADLB$PARAMCD),
            selected = levels(ADLB$PARAMCD)[1],
            multiple = FALSE,
            label = "Choose endpoint"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ADLB$AVISIT),
            selected = levels(ADLB$AVISIT)[2],
            multiple = FALSE,
            label = "Choose visit"
          )
        ),
        columns = columns_spec(
          choices = c("AVAL", "CHG", "BMRKR1", "BRRKR2", "AGE", "STRATA1", "STRATA2"),
          selected = "AVAL",
          multiple = TRUE,
          fixed = FALSE,
          label = "Variables"
        )
      )
    )
  )
)

\dontrun{
shinyApp(app$ui, app$server)
}
}
