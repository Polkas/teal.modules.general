% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_g_regression.R
\name{tm_g_regression}
\alias{tm_g_regression}
\title{Scatterplot and Regression Model}
\usage{
tm_g_regression(label = "Regression Analysis", dataname, regressor,
  response, plot_height = c(600, 200, 2000), pre_output = NULL,
  post_output = NULL)
}
\arguments{
\item{label}{label shown in the navigation for the item}

\item{dataname}{name of datasets used to generate the regression plot (just used for labeling)}

\item{regressor}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
regressor variable from an incoming dataset with filtering and selecting.}

\item{response}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
response variable from an incoming dataset with filtering and selecting.}

\item{plot_height}{(\code{numeric}) a vector of length three with \code{c(value, min and max)} for a slider
encoding the plot height.}

\item{pre_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}

\item{post_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}
}
\description{
Scatterplot and Regression Model
}
\examples{
library(random.cdisc.data)
library(tern)

# datasets: wide and long

ASL <- cadsl
ALB <- cadlb

keys(ASL) <- c("STUDYID", "USUBJID")
keys(ALB) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")

app <- init(
  data = cdisc_data(
    ASL = ASL,
    ALB = ALB,
    code = 'ASL <- cadsl
            ALB <- cadlb
            keys(ASL) <- c("STUDYID", "USUBJID")
            keys(ALB) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")',
    check = FALSE),
  modules = root_modules(
    tm_g_regression(
      label = "Regression",
      dataname = c("ASL", "ALB"),
      response = data_extract_spec(
        dataname = "ALB",
        filter = list(
          filter_spec(
            vars = "PARAMCD",
            choices = levels(ALB$PARAMCD),
            selected = levels(ALB$PARAMCD)[1],
            multiple = FALSE,
            label = "Choose endpoint"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ALB$AVISIT),
            selected = levels(ALB$AVISIT)[1],
            multiple = FALSE,
            label = "Choose endpoint"
          )
        ),
        columns = columns_spec(
          choices = "AVAL",
          selected = "AVAL",
          multiple = FALSE,
          fixed = FALSE,
          label = "variable"
        )
      ),
      regressor = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(
          choices = c("BMRKR1", "BMRKR2"),
          selected = c("BMRKR1"),
          multiple = FALSE,
          fixed = FALSE
        )
      )
    )
  )
)

\dontrun{
shinyApp(app$ui, app$server)
}
}
