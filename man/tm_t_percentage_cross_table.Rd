% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_t_percentage_cross_table.R
\name{tm_t_percentage_cross_table}
\alias{tm_t_percentage_cross_table}
\title{Cross table based on rtables}
\usage{
tm_t_percentage_cross_table(label = "Cross Table", dataname, x, y,
  pre_output = NULL, post_output = NULL)
}
\arguments{
\item{label}{(\code{character}) Label of the app in the teal menu}

\item{dataname}{(\code{character}) Name of the dataset used in the teal app. Just a single
dataset is allowed!}

\item{x}{(\code{choices_selected}) object with all available
choices with preselected option for variable X}

\item{y}{(\code{choices_selected}) object with all available
choices with preselected option for variable Y}

\item{pre_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}

\item{post_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}

\item{...}{Arguments passed on to \code{teal.devel::standard_layout}
\describe{
  \item{pre_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}
  \item{post_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}
}}
}
\description{
Cross table based on rtables
}
\examples{
library(random.cdisc.data)

# datasets: single wide

ASL <- cadsl

app <- init(
  data = cdisc_data(
    ASL = ASL,
    code = "ASL <- cadsl",
    check = TRUE
  ),
  modules = root_modules(
    tm_t_percentage_cross_table(
      label = "Cross Table",
      dataname = "ASL",
      x = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(
          label = "Select X Variable",
          choices = c("COUNTRY", "STUDYID"),
          fixed = FALSE
        )
      ),
      y = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(
          label = "Select Y Variable",
          choices = c("SEX", "RACE"),
          fixed = FALSE
        )
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: different wide

library(random.cdisc.data)
library(tern)
library(dplyr)

ASL <- cadsl
ASL <- mutate_at(ASL,
  .vars = vars(c("ARM", "ACTARM", "ACTARMCD", "SEX", "STRATA1", "STRATA2")),
  .funs = funs(as.factor(.))
) \%>\% select(
  "ARM", "ACTARM", "ACTARMCD",
  "SEX", "STRATA1", "AGE", "USUBJID", "STUDYID", "STRATA2"
)
keys(ASL) <- c("STUDYID", "USUBJID")


ADSL_2 <- mutate_at(cadsl,
  .vars = vars(c("ARM", "ACTARM", "ACTARMCD", "SEX", "STRATA1", "STRATA2")),
  .funs = funs(as.factor(.))
) \%>\% select("ACTARM", "AGE", "STRATA2", "COUNTRY", "USUBJID", "STUDYID")
keys(ADSL_2) <- c("STUDYID", "USUBJID")

app <- init(
  data = cdisc_data(
    ASL = ASL,
    ADSL_2 = ADSL_2,
    code = 'ASL <- cadsl
ADSL_2 <- mutate_at(cadsl,
.vars = vars(c("ARM", "ACTARM", "ACTARMCD", "SEX", "STRATA1", "STRATA2")),
.funs = funs(as.factor(.))) \%>\% select("ACTARM", "AGE", "STRATA2", "COUNTRY", "USUBJID", "STUDYID")
keys(ASL) <- keys(ADSL_2) <- c("STUDYID", "USUBJID")',
    check = FALSE
  ),
  modules = root_modules(
    tm_t_percentage_cross_table("Cross Table",
     dataname = c("ASL", "ADSL_2"),
     x = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(
         label = "Select variable",
          choices = c("AGE", "SEX", "STRATA1", "RACE"),
          selected = c("AGE"),
          multiple = FALSE
        )),
      y = data_extract_spec(
        dataname = "ADSL_2",
        columns = columns_spec(
          label = "Select variables",
          choices = c("COUNTRY", "AGE", "RACE"),
          selected = "RACE",
          multiple = FALSE
        )),
     )
   )
)

\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: multiple long datasets
library(random.cdisc.data)

ASL <- cadsl
ADRS <- cadrs
ADTTE <- cadtte

app <- init(
  data = cdisc_data(
    ASL = ASL,
    ADRS = ADRS,
    ADTTE = ADTTE,
    code = "ASL <- cadsl; ADRS <- cadrs; ADTTE <- cadtte",
    check = FALSE
  ),
  modules = root_modules(
    tm_t_percentage_cross_table(
      label = "Cross Table",
      dataname = c("ASL", "ADRS", "ADTTE"),
      x = data_extract_spec(
        dataname = "ADRS",
        filter = filter_spec(
          vars = c("PARAMCD", "AVISIT"),
          choices = apply(expand.grid(unique(ADRS$PARAMCD), unique(ADRS$AVISIT)),
                          1, paste, collapse = " - "),
          selected = "OVRINV - Screening",
          multiple = TRUE
        ),
        columns = columns_spec(
          choices = names(ADRS),
          selected = "AVALC",
          multiple = FALSE,
          fixed = FALSE
        )
      ),
      y = data_extract_spec(
        dataname = "ADTTE",
        filter = filter_spec(
          vars = c("PARAMCD"),
          choices = unique(ADTTE$PARAMCD),
          selected = "OS",
          multiple = TRUE
        ),
        columns = columns_spec(
          choices = names(ADTTE),
          selected = "CNSR",
          multiple = FALSE,
          fixed = FALSE
        )
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: wide, long

library(random.cdisc.data)
library(tern)

ASL <- cadsl
ADRS <- cadrs
keys(ASL) <- c("STUDYID", "USUBJID")
keys(ADRS) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")

app <- init(
  data = cdisc_data(
    ASL = ASL,
    ADRS = ADRS,
    code = 'ASL <- cadsl
ADRS <- cadrs
keys(ASL) <- c("STUDYID", "USUBJID")
keys(ADRS) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")',
    check = FALSE
  ),
  modules = root_modules(
   tm_t_percentage_cross_table("Cross Table",
     dataname = c("ASL", "ADRS"),
     x = data_extract_spec(
          dataname = "ADRS",
          filter = list(
            filter_spec(
              vars = "PARAM",
              choices = unique(ADRS$PARAM),
              selected = unique(ADRS$PARAM)[1],
              multiple = FALSE,
              label = "Choose response"
            ),
            filter_spec(
              vars = "AVISIT",
              choices = levels(ADRS$AVISIT),
              selected = levels(ADRS$AVISIT)[1],
              multiple = FALSE,
              label = "Choose visit"
            )
          ),
          columns = columns_spec(
            choices = "STUDYID",
            selected = "STUDYID",
            multiple = FALSE,
            label = "variable"
          )
        ),
     y = data_extract_spec(
          dataname = "ASL",
          columns = columns_spec(
            choices = c("SEX", "AGE", "RACE", "COUNTRY"),
            selected = "AGE",
            multiple = FALSE,
            fixed = FALSE
          )
        ),
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: different subsets of long dataset

library(random.cdisc.data)
library(tern)

ASL <- cadsl
ADLB <- cadlb

keys(ASL) <- c("STUDYID", "USUBJID")
keys(ADLB) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")

app <- init(
  data = cdisc_data(
    ASL = ASL,
    ADLB = ADLB,
    code = 'ASL <- cadsl
           ADLB <- cadlb
           keys(ASL) <- c("STUDYID", "USUBJID")
           keys(ADLB) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")',
    check = TRUE
  ),
  modules = root_modules(
    tm_t_percentage_cross_table(
      label = "Cross Table",
      dataname = "ADLB",
      x = data_extract_spec(
        dataname = "ADLB",
        filter = filter_spec(
           vars = "ARMCD",
          choices = levels(ADLB$ARMCD),
          selected = levels(ADLB$ARMCD)[1],
          multiple = FALSE,
          label = "Choose ARM"
        ),
        columns = columns_spec(
          choices = names(ADLB),
          selected = "AVISIT",
          multiple = FALSE,
          fixed = FALSE,
          label = "Variable"
        )
      ),
      y = data_extract_spec(
        dataname = "ADLB",
        filter = filter_spec(
          vars = "ARMCD",
          choices = levels(ADLB$ARMCD),
          selected = levels(ADLB$ARMCD)[1],
          multiple = FALSE,
          label = "Choose ARM"
        ),
        columns = columns_spec(
          choices = names(ADLB),
          selected = "PARAMCD",
          multiple = FALSE,
          fixed = FALSE,
          label = "Variable"
        )
      )
    )
  )
)

\dontrun{
shinyApp(app$ui, app$server)
}
}
\author{
wolfs25 waddella
}
