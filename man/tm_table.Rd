% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_table.R
\name{tm_table}
\alias{tm_table}
\title{Create a simple cross-table}
\usage{
tm_table(label, dataname, x, y, useNA = c("ifany", "no", "always"),
  pre_output = NULL, post_output = NULL)
}
\arguments{
\item{label}{(\code{chracter}) menu label}

\item{dataname}{(\code{chracter}) name of dataset used to generate table}

\item{x}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Specification how the user can select data to get encoded in the rows of the cross table.
Please just use single selections inside the \code{columns_spec}.}

\item{y}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Specification how the user can select data to get encoded in the columns of the cross table.
Please just use single selections inside the \code{columns_spec}.}

\item{useNA}{(\code{character}) optional pre-selected option indicating how to utilize NA in
table display. One of \code{'ifany'}, \code{'always'}, \code{'no'}. If
missing then \code{'ifany'} will be used. If vector then only the first
one will be used.}

\item{pre_output}{(\code{shiny.tag}) html tags appended below the output}

\item{post_output}{(\code{shiny.tag}) html tags appended after the output}
}
\description{
Create a table with the \code{\link{table}[base]} function
}
\examples{
library(random.cdisc.data)
library(tern)

ASL <- cadsl
keys(ASL) <- c("USUBJID", "STUDYID")

app <- init(
  data = cdisc_data(
    ASL = ASL,
    code = 'ASL <- cadsl; keys(ASL) <- c("USUBJID", "STUDYID")',
    check = FALSE
  ),
  root_modules(
    tm_table(
      "Table Choices",
      dataname =  "ASL",
      x = data_extract_spec(
        "ASL",
        columns = columns_spec(
          choices = base::setdiff(names(ASL), keys(ASL)),
          selected = names(ASL)[5],
          multiple = FALSE,
          fixed = FALSE
        )
      ),
      y = data_extract_spec(
        "ASL",
        columns = columns_spec(
          choices = base::setdiff(names(ASL), keys(ASL)),
          selected = names(ASL)[6],
          multiple = FALSE,
          fixed = FALSE
        )
      )
    )
  )
)

\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: different subsets of long dataset

library(random.cdisc.data)
library(tern)

ASL <- cadsl
ADLB <- cadlb

keys(ASL) <- c("STUDYID", "USUBJID")
keys(ADLB) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")

app <- init(
  data = cdisc_data(
    ASL = ASL,
    ADLB = ADLB,
    code = 'ASL <- cadsl
           ADLB <- cadlb
           keys(ASL) <- c("STUDYID", "USUBJID")
           keys(ADLB) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")',
    check = FALSE
  ),
  root_modules(
    tm_table(
      "Table Choices",
      dataname =  "ADLB",
      x = data_extract_spec(
        dataname = "ADLB",
        filter = filter_spec(
          vars = "ARMCD",
          choices = levels(ADLB$ARMCD),
          selected = levels(ADLB$ARMCD)[1],
          multiple = FALSE,
          label = "Choose ARM"
        ),
        columns = columns_spec(
          choices = names(ADLB),
          selected = "AVISIT",
          multiple = FALSE,
          fixed = FALSE,
          label = "Variable"
        )
      ),
      y = data_extract_spec(
        dataname = "ADLB",
        filter = filter_spec(
          vars = "ARMCD",
          choices = levels(ADLB$ARMCD),
          selected = levels(ADLB$ARMCD)[1],
          multiple = FALSE,
          label = "Choose ARM"
        ),
        columns = columns_spec(
          choices = names(ADLB),
          selected = "PARAMCD",
          multiple = FALSE,
          fixed = FALSE,
          label = "Variable"
        )
      )
    )
  )
)

\dontrun{
shinyApp(app$ui, app$server)
}
}
