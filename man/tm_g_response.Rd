% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_g_response.R
\name{tm_g_response}
\alias{tm_g_response}
\title{Response Plots}
\usage{
tm_g_response(label = "Response Plot", dataname, response, x,
  row_facet = NULL, col_facet = NULL, coord_flip = TRUE,
  freq = FALSE, plot_height = c(600, 400, 5000), pre_output = NULL,
  post_output = NULL)
}
\arguments{
\item{label}{label shown in the navigation for the item}

\item{dataname}{(\code{character}) Name of dataset used to generate the response plot}

\item{response}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Which variable to use as the response. You can define one fixed column by using the
setting \code{fixed = TRUE} inside the \code{column_spec}.}

\item{x}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Which variable to use on the X-axis of the response plot. Allow the user to select multiple
columns from the \code{data} allowed in teal. Just allow single columns by \code{multiple = FALSE}.}

\item{row_facet}{optional, (\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Which data columns to use for faceting rows.  Just allow single columns by \code{multiple = FALSE}.}

\item{col_facet}{optional, (\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Which data to use for faceting columns. Just allow single columns by \code{multiple = FALSE}.}

\item{coord_flip}{(\code{logical}) Whether to flip coordinates}

\item{freq}{(\code{logical}) Display frequency (\code{TRUE}) or density (\code{FALSE}).}

\item{plot_height}{(\code{numeric}) Vector of length three with \code{c(value, min and max)}.}

\item{pre_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}

\item{post_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}
}
\description{
Response Plots
}
\examples{
# datasets: same wide

library(random.cdisc.data)
library(tern)

ASL <- cadsl

keys(ASL) <- c("STUDYID", "USUBJID")

app <- init(
  data = cdisc_data(
    ASL = ASL,
    code = 'ASL <- cadsl
            keys(ASL) <- c("STUDYID", "USUBJID")',
    check = FALSE),
  modules = root_modules(
    tm_g_response(
      label = "Response Plots",
      dataname = c("ASL"),
      response = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(
          choices = c("BMRKR1", "BMRKR2"),
          selected = "BMRKR1",
          multiple = FALSE,
          fixed = FALSE,
          label = "variable"
        )
      ),
      x = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(
          choices = c("AGE", "SEX", "RACE"),
          selected = "RACE",
          multiple = FALSE,
          fixed = FALSE
        )
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: different wide
library(random.cdisc.data)
library(tern)
library(dplyr)

ASL <- cadsl
ASL <- mutate_at(ASL,
                 .vars = vars(c("ARM", "ACTARM", "ACTARMCD", "SEX", "STRATA1", "STRATA2")),
                 .funs = funs(as.factor(.))) \%>\% select("ARM", "ACTARM", "ACTARMCD",
 "SEX", "STRATA1", "AGE", "USUBJID", "STUDYID", "STRATA2")
keys(ASL) <- c("STUDYID", "USUBJID")


ASL_2 <- mutate_at(cadsl,
                 .vars = vars(c("ARM", "ACTARM", "ACTARMCD", "SEX", "STRATA1", "STRATA2")),
                 .funs = funs(as.factor(.))) \%>\% select("ACTARM", "AGE", "STRATA2", "COUNTRY", "USUBJID", "STUDYID")
keys(ASL_2) <- c("STUDYID", "USUBJID")


app <- init(
  data = cdisc_data(
    ASL = ASL,
    ASL_2 = ASL_2,
    code = 'ASL <- cadsl
            ASL <- mutate_at(ASL,
                 .vars = vars(c("ARM", "ACTARM", "ACTARMCD", "SEX", "STRATA1", "STRATA2")),
                 .funs = funs(as.factor(.))) \%>\% select("ARM", "ACTARM", "ACTARMCD",
                     "SEX", "BMRKR1", "AGE", "USUBJID", "STUDYID", "BMRKR2")
            ASL_2 <- mutate_at(cadsl,
                 .vars = vars(c("ARM", "ACTARM", "ACTARMCD", "SEX", "STRATA1", "STRATA2")),
                 .funs = funs(as.factor(.))) \%>\% select("ACTARM", "AGE", "STRATA2", "COUNTRY", "USUBJID", "STUDYID")
            keys(ASL) <- keys(ASL_2) <- c("STUDYID", "USUBJID")',
    check = FALSE),
  modules = root_modules(
    tm_g_response(
      label = "Response Plots",
      dataname = c("ASL", "ASL_2"),
      response = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(
         label = "Select variable",
          choices = c("BMRKR1", "BMRKR2"),
          selected = c("BMRKR1"),
          multiple = FALSE
        )),
      x = data_extract_spec(
        dataname = "ASL_2",
        columns = columns_spec(
          label = "Select variables",
          choices = c("COUNTRY", "AGE", "RACE"),
          selected = "COUNTRY",
          multiple = FALSE
        ))
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: multiple long datasets
library(random.cdisc.data)

ASL <- cadsl
ADRS <- cadrs
ADLB <- cadlb

app <- init(
  data = cdisc_data(
    ASL = ASL,
    ADRS = ADRS,
    ADLB = ADLB,
    code = "ASL <- cadsl; ADRS <- cadrs; ADLB <- cadlb",
    check = FALSE
  ),
  modules = root_modules(
    tm_g_response(
      label = "Response Plot on two long datasets",
      dataname = c("ASL", "ADRS", "ADLB"),
      response = data_extract_spec(
        dataname = "ADLB",
        filter = list(
          filter_spec(
            vars = "PARAMCD",
            choices = levels(ADLB$PARAMCD),
            selected = levels(ADLB$PARAMCD)[1],
            multiple = FALSE,
            label = "Choose measurement"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ADLB$AVISIT),
            selected = levels(ADLB$AVISIT)[1],
            multiple = FALSE,
            label = "Choose visit"
          )
        ),
        columns = columns_spec(
          choices = c("AVAL", "AVALC"),
          selected = "AVAL",
          multiple = FALSE,
          fixed = FALSE
        )
      ),
      x = data_extract_spec(
        dataname = "ADRS",
        filter = list(
          filter_spec(
            vars = "PARAMCD",
            choices = levels(ADRS$PARAMCD),
            selected = levels(ADRS$PARAMCD)[1],
            multiple = FALSE,
            label = "Choose endpoint"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ADRS$AVISIT),
            selected = levels(ADRS$AVISIT)[1],
            multiple = FALSE,
            label = "Choose visit"
          )
        ),
        columns = columns_spec(
          choices = "AVALC",
          selected = "AVALC",
          multiple = FALSE,
          fixed = TRUE,
          label = "variable"
        )
      ),
      row_facet = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(
          choices = c("SEX", "AGE"),
          selected = NULL,
          multiple = FALSE,
          fixed = FALSE
        )
      ),
      col_facet = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(
          choices = c("SEX", "AGE"),
          selected = NULL,
          multiple = FALSE,
          fixed = FALSE
        )
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}


# datasets: wide and long
library(random.cdisc.data)
library(tern)

ASL <- cadsl
ADLB <- cadlb

keys(ASL) <- c("STUDYID", "USUBJID")
keys(ADLB) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")

app <- init(
 data = cdisc_data(
   ASL = ASL,
   ADLB = ADLB,
   code = 'ASL <- cadsl
           ADLB <- cadlb
           keys(ASL) <- c("STUDYID", "USUBJID")
           keys(ADLB) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")',
   check = FALSE),
 modules = root_modules(
   tm_g_response(
     label = "Response Plots",
     dataname = c("ASL", "ADLB"),
     response = data_extract_spec(
       dataname = "ADLB",
       filter = list(
         filter_spec(
           vars = "PARAM",
          choices = levels(ADLB$PARAM),
           selected = levels(ADLB$PARAM)[1],
           multiple = FALSE,
           label = "Choose measurement"
         ),
         filter_spec(
           vars = "AVISIT",
           choices = levels(ADLB$AVISIT),
           selected = levels(ADLB$AVISIT)[1],
           multiple = FALSE,
           label = "Choose visit"
         )
       ),
       columns = columns_spec(
         choices = "AVAL",
         selected = "AVAL",
         multiple = FALSE,
         fixed = FALSE,
         label = "variable"
       )
    ),
     x = data_extract_spec(
       dataname = "ASL",
       columns = columns_spec(
         choices = c("BMRKR1", "BMRKR2"),
         selected = c("BMRKR1"),
         multiple = FALSE,
         fixed = FALSE
      )
     )
   )
)
)

\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: same long dataset

library(random.cdisc.data)
library(tern)

ASL <- cadsl
ADRS <- cadrs

keys(ASL) <- c("STUDYID", "USUBJID")
keys(ADRS) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")

app <- init(
  data = cdisc_data(
    ASL = ASL,
    ADRS = ADRS,
    code = 'ASL <- cadsl
           ADRS <- cadrs
           keys(ASL) <- c("USUBJID", "STUDYID")
           keys(ADRS) <- c("USUBJID", "STUDYID", "PARAMCD", "AVISIT")',
    check = FALSE
  ),
  modules = root_modules(
    tm_g_response(
      dataname = "ADRS",
      response = data_extract_spec(
        dataname = "ADRS",
        columns = columns_spec(
          choices = "AVAL",
          selected = "AVAL",
          multiple = FALSE,
          fixed = TRUE,
          label = "Variable"
        )
      ),
      x = data_extract_spec(
        dataname = "ADRS",
        columns = columns_spec(
          choices = c("ARMCD", "ACTARMCD"),
          selected = "ARMCD",
          multiple = FALSE,
          fixed = FALSE,
          label = "Variable"
        )
      ),
      row_facet = data_extract_spec(
        dataname = "ADRS",,
        columns = columns_spec(
          choices = "PARAMCD",
          selected = "PARAMCD",
          multiple = FALSE,
          fixed = FALSE,
          label = "Variable"
        )
      ),
      col_facet = data_extract_spec(
        dataname = "ADRS",
        columns = columns_spec(
          choices = "AVISIT",
          selected = "AVISIT",
          multiple = FALSE,
          fixed = FALSE,
          label = "Variable"
        )
      )
    )
  )
)

\dontrun{
shinyApp(app$ui, app$server)
}


# datasets: different subsets of long dataset

library(random.cdisc.data)
library(tern)

ASL <- cadsl
ADLB <- cadlb

keys(ASL) <- c("STUDYID", "USUBJID")
keys(ADLB) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")

app <- init(
  data = cdisc_data(
    ASL = ASL,
    ADLB = ADLB,
    code = 'ASL <- cadsl
           ADLB <- cadrs
           keys(ASL) <- c("USUBJID", "STUDYID")
           keys(ADLB) <- c("USUBJID", "STUDYID", "PARAMCD", "AVISIT")',
    check = FALSE
  ),
  modules = root_modules(
    tm_g_response(
      dataname = "ADLB",
      response = data_extract_spec(
        dataname = "ADLB",
        filter = list(
          filter_spec(
            vars = "PARAMCD",
            choices = levels(ADLB$PARAMCD),
            selected = levels(ADLB$PARAMCD)[1],
            multiple = FALSE,
            label = "Choose measurement"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ADLB$AVISIT),
            selected = levels(ADLB$AVISIT)[1],
            multiple = FALSE,
            label = "Choose visit"
          )
        ),
        columns = columns_spec(
          choices = "AVAL",
          selected = "AVAL",
          multiple = FALSE,
          fixed = TRUE,
          label = "Variable"
        )
      ),
      x = data_extract_spec(
        dataname = "ADLB",
        filter = list(
          filter_spec(
            vars = "PARAMCD",
            choices = levels(ADLB$PARAMCD),
            selected = levels(ADLB$PARAMCD)[1],
            multiple = FALSE,
            label = "Choose measurement"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ADLB$AVISIT),
            selected = levels(ADLB$AVISIT)[1],
            multiple = FALSE,
            label = "Choose visit"
          )
        ),
        columns = columns_spec(
          choices = c("ARMCD", "ACTARMCD"),
          selected = "ARMCD",
          multiple = FALSE,
          fixed = FALSE,
          label = "Variable"
        )
      ),
      row_facet = data_extract_spec(
        dataname = "ADLB",
        filter = list(
          filter_spec(
            vars = "PARAMCD",
            choices = levels(ADLB$PARAMCD),
            selected = levels(ADLB$PARAMCD)[1],
            multiple = FALSE,
            label = "Choose measurement"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ADLB$AVISIT),
            selected = levels(ADLB$AVISIT)[1],
            multiple = FALSE,
            label = "Choose visit"
          )
        ),
        columns = columns_spec(
          choices = c("", "SEX", "RACE"),
          selected = "",
          multiple = FALSE,
          fixed = FALSE,
          label = "Variable"
        )
      ),
      col_facet = data_extract_spec(
        dataname = "ADLB",
        filter = list(
          filter_spec(
            vars = "PARAMCD",
            choices = levels(ADLB$PARAMCD),
            selected = levels(ADLB$PARAMCD)[1],
            multiple = FALSE,
            label = "Choose measurement"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ADLB$AVISIT),
            selected = levels(ADLB$AVISIT)[1],
            multiple = FALSE,
            label = "Choose visit"
          )
        ),
        columns = columns_spec(
          choices = c("", "SEX", "RACE"),
          selected = "",
          multiple = FALSE,
          fixed = FALSE,
          label = "Variable"
        )
      )
    )
  )
)

\dontrun{
shinyApp(app$ui, app$server)
}
}
