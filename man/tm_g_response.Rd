% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_g_response.R
\name{tm_g_response}
\alias{tm_g_response}
\title{Response Plots}
\usage{
tm_g_response(label = "Response Plot", dataname, response, xvar = NULL,
  row_facet_var = NULL, col_facet_var = NULL, coord_flip = TRUE,
  freq = FALSE, plot_height = c(600, 400, 5000), pre_output = NULL,
  post_output = NULL)
}
\arguments{
\item{label}{label shown in the navigation for the item}

\item{dataname}{(\code{character}) Name of dataset used to generate the response plot}

\item{response}{(\code{list} of \code{data_extract_spec}) Which variable to use as the
response. You can define one fixed column by using the setting \code{fixed = TRUE} inside
the \code{column_spec}.}

\item{xvar}{(\code{list} of \code{data_extract_spec}) Which variable to use on the
X-axis of the response plot. Allow the user to select multiple columns from the \code{data} allowed
in teal. Just allow single columns by \code{multiple = FALSE}.}

\item{row_facet_var}{(\code{list} of \code{data_extract_spec}) Which data columns
to use for faceting rows.  Just allow single columns by \code{multiple = FALSE}.}

\item{col_facet_var}{(\code{list} of \code{data_extract_spec}) Which data to use for faceting columns.
Just allow single columns by \code{multiple = FALSE}.}

\item{coord_flip}{(\code{logical}) Whether to flip coordinates}

\item{freq}{(\code{logical}) Display frequency (\code{TRUE}) or density (\code{FALSE}).}

\item{plot_height}{(\code{numeric}) Vector of length three with \code{c(value, min and max)}.}
}
\description{
Response Plots
}
\examples{

library(random.cdisc.data)

asl <- radsl()
ars <- radrs(asl)
utils.nest::keys(asl) <- c("USUBJID", "STUDYID")
utils.nest::keys(ars) <- c("USUBJID", "STUDYID", "PARAMCD")

ars_filters <- filter_spec(
  vars = c("PARAMCD"),
  sep = " - ",
  choices = unique(ars$PARAMCD),
  selected = unique(ars$PARAMCD)[1],
  multiple = FALSE,
  label = "Choose endpoint and Censor"
)

ars_extracted_response <- data_extract_spec(
  dataname = "ARS",
  filter = ars_filters,
  columns = columns_spec(
    choices = c("AVALC"),
    selected = c("AVALC"),
    multiple = FALSE,
    fixed = TRUE,
    label = "variable"
  )
)

asl_extracted <- data_extract_spec(
  dataname = "ASL",
  columns = columns_spec(
    choices = names(asl),
    selected = c("RACE"),
    multiple = FALSE,
    fixed = FALSE
  )
)
asl_extracted_row <- data_extract_spec(
  dataname = "ASL",
  columns = columns_spec(
    choices = c("", "SEX", "AGE"),
    selected = "",
    multiple = FALSE,
    fixed = FALSE
  )
)
asl_extracted_col <- data_extract_spec(
  dataname = "ASL",
  columns = columns_spec(
    choices = c("", "SEX", "AGE"),
    selected = "",
    multiple = FALSE,
    fixed = FALSE
  )
)

app <- teal::init(
  data = cdisc_data(
    ASL = asl,
    ARS = ars,
    code = 'asl <- radsl(seed = 1)
           ars <- radrs(asl, seed = 1)
           utils.nest::keys(asl) <- c("USUBJID", "STUDYID")
           utils.nest::keys(ars) <- c("USUBJID", "STUDYID")',
     check = FALSE),
  modules = root_modules(
    tm_g_response(
      dataname = "ARS",
      response = list(ars_extracted_response),
      xvar = list(asl_extracted),
      row_facet_var = list(asl_extracted_row),
      col_facet_var = list(asl_extracted_col)
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}
## as ggplot only
library(dplyr)
library(forcats)

anl <- suppressWarnings(inner_join(ars, asl))

anl_filtered <- anl \%>\%
  dplyr::filter(PARAMCD == "BESRSPI") \%>\%
  mutate(ALL = factor(rep("Response", n())))

anl_filtered \%>\%
  ggplot() +
  aes(x = ALL) +
  geom_bar(aes(fill = AVALC))


anl_filtered \%>\%
  ggplot() +
  aes(x = SEX) +
  geom_bar(aes(fill = AVALC))

anl_filtered \%>\%
  ggplot() +
  aes(x = SEX) +
  geom_bar(aes(fill = AVALC)) +
  facet_grid(cols = vars(ARM))


anl_filtered \%>\%
  ggplot() +
  aes(x = SEX) +
  geom_bar(aes(fill = AVALC), position = "fill") +
  facet_grid(cols = vars(ARM)) +
  ylab("Distribution") +
  coord_flip()


anl_filtered \%>\%
  ggplot() +
  aes(x = SEX) +
  geom_bar(aes(fill = AVALC), position = "fill") +
  geom_text(stat = "count", aes(label = ..count.., vjust = -1), position = "fill") +
  expand_limits(y = c(0, 1.2)) +
  facet_grid(cols = vars(ARM)) +
  ylab("Distribution")

anl_filtered \%>\%
  ggplot() +
  aes(x = forcats::fct_rev(SEX)) +
  xlab("SEX") +
  geom_bar(aes(fill = AVALC), position = "fill") +
  geom_text(stat = "count", aes(label = paste(" ", ..count..), hjust = 0), position = "fill") +
  scale_y_continuous(limits = c(0, 1.4)) +
  facet_grid(cols = vars(ARM)) +
  ylab("Distribution") +
  coord_flip()
}
