% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_g_response.R
\name{tm_g_response}
\alias{tm_g_response}
\title{Response Plots}
\usage{
tm_g_response(label = "Association", dataname, endpoint, resp_var,
  x_var = NULL, row_facet_var = NULL, col_facet_var = NULL,
  coord_flip = TRUE, freq = FALSE, plot_height = c(600, 400, 5000),
  pre_output = NULL, post_output = NULL, code_data_processing = NULL)
}
\arguments{
\item{label}{label shown in the navigation for the item}

\item{dataname}{name of dataset used to generate table}

\item{endpoint}{(\code{choices_selected}) Which variable to use as EndPoint}

\item{resp_var}{(\code{choices_selected}) Which variable to use as Response}

\item{x_var}{(\code{choices_selected}) Which variable to use as X}

\item{row_facet_var}{(\code{choices_selected}) Which variable to use for faceting rows}

\item{col_facet_var}{(\code{choices_selected}) Which variable to use for faceting columns}

\item{coord_flip}{(\code{logical}) Whether to flip coordinates}

\item{freq}{(\code{logical}) Display frequency}

\item{plot_height}{if scalar then the plot will have a fixed height. If a
slider should be presented to adjust the plot height dynamically then it
can be a vector of length three with \code{c(value, min and max)}.}

\item{pre_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}

\item{post_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}

\item{code_data_processing}{(\code{character}) Code that was used to pre-process the data}
}
\description{
Response Plots
}
\examples{

\dontrun{

library(random.cdisc.data)

ASL <- radsl()
ARS <- radrs(ASL)
attr(ASL, "source") <- "# asl import"
attr(ARS, "source") <- "# ars import"

x <- teal::init(
  data = list(ASL = ASL, ARS = ARS),
  modules = root_modules(
    tm_g_response(
      dataname = "ARS",
      endpoint = choices_selected(ARS$PARAMCD),
      resp_var = choices_selected("AVALC"),
      x_var = choices_selected(names(ASL), "SEX"),
      row_facet_var = choices_selected(names(ASL), NULL),
      col_facet_var = choices_selected(names(ASL), NULL)
    )
  )
)

shinyApp(x$ui, x$server)


## as ggplot only
library(ggplot2)
library(dplyr)
library(forcats)

ANL <- inner_join(ARS, ASL)

anl_filtered <- ANL \%>\%
  filter(PARAMCD == "BESRSPI") \%>\%
  mutate(ALL = factor(rep("Response", n())))

anl_filtered \%>\%
  ggplot() +
  aes(x = ALL) +
  geom_bar(aes(fill = AVALC))


anl_filtered \%>\%
  ggplot() +
  aes(x = SEX) +
  geom_bar(aes(fill = AVALC))

anl_filtered \%>\%
  ggplot() +
  aes(x = SEX) +
  geom_bar(aes(fill = AVALC)) +
  facet_grid(cols = vars(ARM))


anl_filtered \%>\%
  ggplot() +
  aes(x = SEX) +
  geom_bar(aes(fill = AVALC), position = "fill") +
  facet_grid(cols = vars(ARM)) +
  ylab("Distribution") +
  coord_flip()


anl_filtered \%>\%
  ggplot() +
  aes(x = SEX) +
  geom_bar(aes(fill = AVALC), position = "fill") +
  geom_text(stat = "count", aes(label = ..count.., vjust = -1), position = "fill") +
  expand_limits(y = c(0, 1.2)) +
  facet_grid(cols = vars(ARM)) +
  ylab("Distribution")

anl_filtered \%>\%
  ggplot() +
  aes(x = fct_rev(SEX)) +
  geom_bar(aes(fill = AVALC), position = "fill") +
  geom_text(stat = "count", aes(label = paste(" ", ..count..), hjust = 0), position = "fill") +
  scale_y_continuous(limits = c(0, 1.4)) +
  facet_grid(cols = vars(ARM)) +
  ylab("Distribution") +
  coord_flip()
}

}
