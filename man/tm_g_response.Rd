% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_g_response.R
\name{tm_g_response}
\alias{tm_g_response}
\title{Response Plots}
\usage{
tm_g_response(label = "Response Plot", response, x, row_facet = NULL,
  col_facet = NULL, coord_flip = TRUE, freq = FALSE,
  plot_height = c(600, 400, 5000), pre_output = NULL,
  post_output = NULL)
}
\arguments{
\item{label}{label shown in the navigation for the item}

\item{response}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Which variable to use as the response. You can define one fixed column by using the
setting \code{fixed = TRUE} inside the \code{select_spec}.}

\item{x}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Which variable to use on the X-axis of the response plot. Allow the user to select multiple
columns from the \code{data} allowed in teal. Just allow single columns by \code{multiple = FALSE}.}

\item{row_facet}{optional, (\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Which data columns to use for faceting rows.  Just allow single columns by \code{multiple = FALSE}.}

\item{col_facet}{optional, (\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Which data to use for faceting columns. Just allow single columns by \code{multiple = FALSE}.}

\item{coord_flip}{(\code{logical}) Whether to flip coordinates}

\item{freq}{(\code{logical}) Display frequency (\code{TRUE}) or density (\code{FALSE}).}

\item{plot_height}{(\code{numeric}) Vector of length three with \code{c(value, min and max)}.}

\item{pre_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}

\item{post_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}
}
\description{
Response Plots
}
\examples{
# datasets: same wide
# bug: lapply(selector_list, check_selector) this function throw an error if some
# Response plot with selected response (BMRKR1) and selected x variable (RACE)
library(random.cdisc.data)

ADSL <- cadsl

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL", ADSL),
    code = "ADSL <- cadsl",
    check = TRUE
  ),
  modules = root_modules(
    tm_g_response(
      label = "Response Plots",
      response = data_extract_spec(
        dataname = "ADSL",
        select = select_spec(
          label = "Select variable:",
          choices = c("BMRKR2", "COUNTRY"),
          selected = "BMRKR2",
          multiple = FALSE,
          fixed = FALSE
        )
      ),
      x = data_extract_spec(
        dataname = "ADSL",
        select = select_spec(
          label = "Select variable:",
          choices = c("SEX", "RACE"),
          selected = "RACE",
          multiple = FALSE,
          fixed = FALSE
        )
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: different wide
library(random.cdisc.data)
library(dplyr)

ADSL <- cadsl
ADSL <- select(ADSL, "ARM", "ACTARM", "ACTARMCD", "SEX",
  "AGE", "USUBJID", "STUDYID", "BMRKR1", "BMRKR2")
ADSL_2 <- select(cadsl, "ACTARM", "AGE", "RACE",
  "STRATA2", "COUNTRY", "USUBJID", "STUDYID")

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL", ADSL),
    dataset("ADSL_2", ADSL_2, keys = get_cdisc_keys("ADSL")),
    code = 'ADSL <- cadsl
            ADSL <- select(ADSL, "ARM", "ACTARM", "ACTARMCD", "SEX",
              "AGE", "USUBJID", "STUDYID", "BMRKR1", "BMRKR2")
            ADSL_2 <- select(cadsl, "ACTARM", "AGE", "RACE",
              "STRATA2", "COUNTRY", "USUBJID", "STUDYID")',
    check = TRUE
  ),
  modules = root_modules(
    tm_g_response(
      label = "Response Plots",
      response = data_extract_spec(
        dataname = "ADSL",
        select = select_spec(
          label = "Select variable:",
          choices = c("BMRKR2", "SEX"),
          selected = c("BMRKR2"),
          multiple = FALSE
        )
      ),
      x = data_extract_spec(
        dataname = "ADSL_2",
        select = select_spec(
          label = "Select variable:",
          choices = c("COUNTRY", "AGE", "RACE"),
          selected = "COUNTRY",
          multiple = FALSE
        )
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: multiple long datasets
# Response plot of different parameters from ADRS or ADLB datasets
library(random.cdisc.data)
library(dplyr)

ADSL <- cadsl
ADRS <- cadrs
ADLB <- mutate(cadlb, ABLFL2 = as.factor(ABLFL2))

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL", ADSL),
    cdisc_dataset("ADRS", ADRS),
    cdisc_dataset("ADLB", ADLB),
    code = "ADSL <- cadsl; ADRS <- cadrs; ADLB <- mutate(cadlb, ABLFL2 = as.factor(ABLFL2))",
    check = TRUE
  ),
  modules = root_modules(
    tm_g_response(
      label = "Response Plot on two long datasets",
      response = data_extract_spec(
        dataname = "ADLB",
        filter = list(
          filter_spec(
            label = "Select parameter:",
            vars = "PARAMCD",
            choices = levels(ADLB$PARAMCD),
            selected = levels(ADLB$PARAMCD)[1],
            multiple = FALSE
          ),
          filter_spec(
            label = "Select visit:",
            vars = "AVISIT",
            choices = levels(ADLB$AVISIT),
            selected = levels(ADLB$AVISIT)[1],
            multiple = FALSE
          )
        ),
        select = select_spec(
          label = "Select variable:",
          choices = c("BEP01FL"),
          selected = "BEP01FL",
          multiple = FALSE,
          fixed = FALSE
        )
      ),
      x = data_extract_spec(
        dataname = "ADRS",
        filter = list(
          filter_spec(
            label = "Select parameter:",
            vars = "PARAMCD",
            choices = levels(ADRS$PARAMCD),
            selected = levels(ADRS$PARAMCD)[1],
            multiple = FALSE
          ),
          filter_spec(
            label = "Select visit:",
            vars = "AVISIT",
            choices = levels(ADRS$AVISIT),
            selected = levels(ADRS$AVISIT)[1],
            multiple = FALSE
          )
        ),
        select = select_spec(
          choices = "STRATA2",
          selected = "STRATA2",
          multiple = FALSE,
          fixed = TRUE
        )
      ),
      row_facet = data_extract_spec(
        dataname = "ADSL",
        select = select_spec(
          label = "Select variable:",
          choices = c("SEX"),
          selected = NULL,
          multiple = FALSE,
          fixed = FALSE
        )
      ),
      col_facet = data_extract_spec(
        dataname = "ADSL",
        select = select_spec(
          label = "Select variable:",
          choices = c("SEX", "COUNTRY"),
          selected = NULL,
          multiple = FALSE,
          fixed = FALSE
        )
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: wide and long
library(random.cdisc.data)
library(dplyr)

ADSL <- cadsl
ADLB <- mutate(cadlb, ABLFL2 = as.factor(ABLFL2))

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL", ADSL),
    cdisc_dataset("ADLB", ADLB),
    code = "ADSL <- cadsl; ADLB <- mutate(cadlb, ABLFL2 = as.factor(ABLFL2))",
    check = TRUE
  ),
  modules = root_modules(
    tm_g_response(
      label = "Response Plots",
      response = data_extract_spec(
        dataname = "ADLB",
        filter = list(
          filter_spec(
            vars = "PARAM",
            choices = levels(ADLB$PARAM),
            selected = levels(ADLB$PARAM)[1],
            multiple = FALSE,
            label = "Select measurement:"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ADLB$AVISIT),
            selected = levels(ADLB$AVISIT)[1],
            multiple = FALSE,
            label = "Select visit:"
          )
        ),
        select = select_spec(
          choices = "BEP01FL",
          selected = "BEP01FL",
          multiple = FALSE,
          fixed = FALSE,
          label = "Select variable:"
        )
      ),
      x = data_extract_spec(
        dataname = "ADSL",
        select = select_spec(
          choices = c("BMRKR2", "COUNTRY"),
          selected = c("BMRKR2"),
          multiple = FALSE,
          fixed = FALSE
        )
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: same long dataset
# Examine response with respect to chosen explanatory variable, split by PARAMCD and AVISIT

library(random.cdisc.data)

ADSL <- cadsl
ADRS <- cadrs

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL", ADSL),
    cdisc_dataset("ADRS", ADRS),
    code = "ADSL <- cadsl; ADRS <- cadrs",
    check = TRUE
  ),
  modules = root_modules(
    tm_g_response(
      response = data_extract_spec(
        dataname = "ADRS",
        select = select_spec(
          choices = "BMRKR2",
          selected = "BMRKR2",
          multiple = FALSE,
          fixed = TRUE,
          label = "Select variable:"
        )
      ),
      x = data_extract_spec(
        dataname = "ADRS",
        select = select_spec(
          choices = c("ARMCD", "ACTARMCD"),
          selected = "ARMCD",
          multiple = FALSE,
          fixed = FALSE,
          label = "Select variable:"
        )
      ),
      row_facet = data_extract_spec(
        dataname = "ADRS",,
        select = select_spec(
          choices = "PARAMCD",
          selected = "PARAMCD",
          multiple = FALSE,
          fixed = FALSE,
          label = "Select variable:"
        )
      ),
      col_facet = data_extract_spec(
        dataname = "ADRS",
        select = select_spec(
          choices = "AVISIT",
          selected = "AVISIT",
          multiple = FALSE,
          fixed = FALSE,
          label = "Select variable:"
        )
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}


# datasets: different subsets of long dataset
# Examine lab values with respect to chosen explanatory variable, split by PARAMCD and AVISIT

library(random.cdisc.data)

ADSL <- cadsl
ADLB <- cadlb

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL", ADSL),
    cdisc_dataset("ADLB", ADLB),
    code = "ADSL <- cadsl; ADLB <- cadlb",
    check = TRUE
  ),
  modules = root_modules(
    tm_g_response(
      response = data_extract_spec(
        dataname = "ADLB",
        filter = filter_spec(
            vars = "PARAMCD",
            choices = levels(ADLB$PARAMCD),
            selected = levels(ADLB$PARAMCD)[1],
            multiple = FALSE,
            label = "Select lab:"
        ),
        select = select_spec(
          choices = "BEP01FL",
          selected = "BEP01FL",
          multiple = FALSE,
          fixed = TRUE
        )
      ),
      x = data_extract_spec(
        dataname = "ADLB",
        filter = filter_spec(
            vars = "PARAMCD",
            choices = levels(ADLB$PARAMCD),
            selected = levels(ADLB$PARAMCD)[2],
            multiple = FALSE,
            label = "Select lab:"
        ),
        select = select_spec(
          choices = "AVISIT",
          selected = "AVISIT",
          multiple = FALSE,
          fixed = TRUE
        )
      ),
      row_facet = data_extract_spec(
        dataname = "ADLB",
        filter = list(
          filter_spec(
            vars = "PARAMCD",
            choices = levels(ADLB$PARAMCD),
            selected = levels(ADLB$PARAMCD)[1],
            multiple = FALSE,
            label = "Select lab:"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ADLB$AVISIT),
            selected = levels(ADLB$AVISIT)[1],
            multiple = FALSE,
            label = "Select visit:"
          )
        ),
        select = select_spec(
          choices = c("SEX", "RACE"),
          selected = NULL,
          multiple = FALSE,
          fixed = FALSE,
          label = "Select Variable"
        )
      ),
      col_facet = data_extract_spec(
        dataname = "ADLB",
        filter = list(
          filter_spec(
            vars = "PARAMCD",
            choices = levels(ADLB$PARAMCD),
            selected = levels(ADLB$PARAMCD)[1],
            multiple = FALSE,
            label = "Select lab:"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ADLB$AVISIT),
            selected = levels(ADLB$AVISIT)[1],
            multiple = FALSE,
            label = "Select visit:"
          )
        ),
        select = select_spec(
          choices = c("SEX", "RACE"),
          selected = NULL,
          multiple = FALSE,
          fixed = FALSE,
          label = "Select variable:"
        )
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}
}
