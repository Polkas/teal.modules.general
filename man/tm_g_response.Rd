% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_g_response.R
\name{tm_g_response}
\alias{tm_g_response}
\title{Response Plots}
\usage{
tm_g_response(label = "Response Plot", dataname, response, x,
  row_facet = NULL, col_facet = NULL, coord_flip = TRUE,
  freq = FALSE, plot_height = c(600, 400, 5000), pre_output = NULL,
  post_output = NULL)
}
\arguments{
\item{label}{label shown in the navigation for the item}

\item{dataname}{(\code{character}) Name of dataset used to generate the response plot}

\item{response}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Which variable to use as the response. You can define one fixed column by using the
setting \code{fixed = TRUE} inside the \code{column_spec}.}

\item{x}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Which variable to use on the X-axis of the response plot. Allow the user to select multiple
columns from the \code{data} allowed in teal. Just allow single columns by \code{multiple = FALSE}.}

\item{row_facet}{optional, (\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Which data columns to use for faceting rows.  Just allow single columns by \code{multiple = FALSE}.}

\item{col_facet}{optional, (\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Which data to use for faceting columns. Just allow single columns by \code{multiple = FALSE}.}

\item{coord_flip}{(\code{logical}) Whether to flip coordinates}

\item{freq}{(\code{logical}) Display frequency (\code{TRUE}) or density (\code{FALSE}).}

\item{plot_height}{(\code{numeric}) Vector of length three with \code{c(value, min and max)}.}

\item{pre_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}

\item{post_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}
}
\description{
Response Plots
}
\examples{
library(random.cdisc.data)
library(tern)

ASL <- cadsl
ARS <- cadrs
keys(ASL) <- c("USUBJID", "STUDYID")
keys(ARS) <- c("USUBJID", "STUDYID", "PARAMCD", "AVISIT")

app <- init(
  data = cdisc_data(
    ASL = ASL,
    ARS = ARS,
    code = 'ASL <- cadsl
           ARS <- cadrs
           keys(ASL) <- c("USUBJID", "STUDYID")
           keys(ARS) <- c("USUBJID", "STUDYID", "PARAMCD", "AVISIT")',
    check = FALSE
  ),
  modules = root_modules(
    tm_g_response(
      dataname = "ARS",
      response = data_extract_spec(
        dataname = "ARS",
        filter = list(
          filter_spec(
            vars = "PARAMCD",
            choices = unique(ARS$PARAMCD),
            selected = unique(ARS$PARAMCD)[1],
            multiple = FALSE,
            label = "Choose endpoint"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ARS$AVISIT),
            selected = levels(ARS$AVISIT)[1],
            multiple = FALSE,
            label = "Choose endpoint"
          )
        ),
        columns = columns_spec(
          choices = "AVALC",
          selected = "AVALC",
          multiple = FALSE,
          fixed = TRUE,
          label = "variable"
        )
      ),
      x = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(
          choices = names(ASL),
          selected = c("RACE"),
          multiple = FALSE,
          fixed = FALSE
        )
      ),
      row_facet = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(
          choices = c("", "SEX", "AGE"),
          selected = "",
          multiple = FALSE,
          fixed = FALSE
        )
      ),
      col_facet = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(
          choices = c("", "SEX", "AGE"),
          selected = "",
          multiple = FALSE,
          fixed = FALSE
        )
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: multiple long datasets
library(random.cdisc.data)

ASL <- cadsl
ADRS <- cadrs
ADTTE <- cadtte

app <- init(
  data = cdisc_data(
    ASL = ASL,
    ADRS = ADRS,
    ADTTE = ADTTE,
    code = "ASL <- cadsl; ADRS <- cadrs; ADTTE <- cadtte",
    check = FALSE
  ),
  modules = root_modules(
    tm_g_response(
      label = "Response Plot on two long datasets",
      dataname = c("ASL", "ADRS", "ADTTE"),
      response = data_extract_spec(
        dataname = "ADRS",
        columns = columns_spec(
          choices = "AVALC",
          selected = "AVALC",
          multiple = FALSE,
          fixed = TRUE,
          label = "variable"
        ),
        filter = list(
          filter_spec(
            vars = "PARAMCD",
            choices = unique(ADRS$PARAMCD),
            selected = unique(ADRS$PARAMCD)[1],
            multiple = FALSE,
            label = "Choose endpoint"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ADRS$AVISIT),
            selected = levels(ADRS$AVISIT)[1],
            multiple = FALSE,
            label = "Choose endpoint"
          )
        )
      ),
      x = data_extract_spec(
        dataname = "ADTTE",
        columns = columns_spec(
          choices = c("CNSR", "EVENTDESC"),
          selected = "CNSR",
          multiple = FALSE,
          fixed = FALSE
        ),
        filter = filter_spec(
          vars = c("PARAMCD"),
          choices = unique(ADTTE$PARAMCD),
          selected = "OS",
          multiple = FALSE,
          label = "ADTTE filter"
        )
      ),
      row_facet = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(
          choices = c("SEX", "AGE"),
          selected = NULL,
          multiple = FALSE,
          fixed = FALSE
        )
      ),
      col_facet = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(
          choices = c("SEX", "AGE"),
          selected = NULL,
          multiple = FALSE,
          fixed = FALSE
        )
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}

# as ggplot only
library(dplyr)
library(forcats)
library(random.cdisc.data)
library(tern)

ASL <- cadsl
ARS <- cadrs
keys(ASL) <- c("USUBJID", "STUDYID")
keys(ARS) <- c("USUBJID", "STUDYID", "PARAMCD", "AVISIT")

ANL <- suppressWarnings(inner_join(ARS, ASL))

ANL_FILTERED <- ANL \%>\%
  dplyr::filter(PARAMCD == "BESRSPI") \%>\% # strict call of filter
  mutate(ALL = factor(rep("Response", n())))

ANL_FILTERED \%>\%
  ggplot() +
  aes(x = ALL) +
  geom_bar(aes(fill = AVALC))

ANL_FILTERED \%>\%
  ggplot() +
  aes(x = SEX) +
  geom_bar(aes(fill = AVALC))

ANL_FILTERED \%>\%
  ggplot() +
  aes(x = SEX) +
  geom_bar(aes(fill = AVALC)) +
  facet_grid(cols = vars(ARM))

ANL_FILTERED \%>\%
  ggplot() +
  aes(x = SEX) +
  geom_bar(aes(fill = AVALC), position = "fill") +
  facet_grid(cols = vars(ARM)) +
  ylab("Distribution") +
  coord_flip()

ANL_FILTERED \%>\%
  ggplot() +
  aes(x = SEX) +
  geom_bar(aes(fill = AVALC), position = "fill") +
  geom_text(stat = "count", aes(label = ..count.., vjust = -1), position = "fill") +
  expand_limits(y = c(0, 1.2)) +
  facet_grid(cols = vars(ARM)) +
  ylab("Distribution")

ANL_FILTERED \%>\%
  ggplot() +
  aes(x = fct_rev(SEX)) +
  xlab("SEX") +
  geom_bar(aes(fill = AVALC), position = "fill") +
  geom_text(stat = "count", aes(label = paste(" ", ..count..), hjust = 0), position = "fill") +
  scale_y_continuous(limits = c(0, 1.4)) +
  facet_grid(cols = vars(ARM)) +
  ylab("Distribution") +
  coord_flip()

# datasets: different subsets of long dataset

library(random.cdisc.data)
library(tern)

ASL <- cadsl
ADLB <- cadlb

keys(ASL) <- c("STUDYID", "USUBJID")
keys(ADLB) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")

app <- init(
  data = cdisc_data(
    ASL = ASL,
    ADLB = ADLB,
    code = 'ASL <- cadsl
           ADLB <- cadrs
           keys(ASL) <- c("USUBJID", "STUDYID")
           keys(ADLB) <- c("USUBJID", "STUDYID", "PARAMCD", "AVISIT")',
    check = FALSE
  ),
  modules = root_modules(
    tm_g_response(
      dataname = "ADLB",
      response = data_extract_spec(
        dataname = "ADLB",
        filter = list(
          filter_spec(
            vars = "PARAMCD",
            choices = levels(ADLB$PARAMCD),
            selected = levels(ADLB$PARAMCD)[1],
            multiple = FALSE,
            label = "Choose endpoint"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ADLB$AVISIT),
            selected = levels(ADLB$AVISIT)[1],
            multiple = FALSE,
            label = "Choose visit"
          )
        ),
        columns = columns_spec(
          choices = "AVAL",
          selected = "AVAL",
          multiple = FALSE,
          fixed = TRUE,
          label = "Variable"
        )
      ),
      x = data_extract_spec(
        dataname = "ADLB",
        filter = list(
          filter_spec(
            vars = "PARAMCD",
            choices = levels(ADLB$PARAMCD),
            selected = levels(ADLB$PARAMCD)[1],
            multiple = FALSE,
            label = "Choose endpoint"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ADLB$AVISIT),
            selected = levels(ADLB$AVISIT)[1],
            multiple = FALSE,
            label = "Choose visit"
          )
        ),
        columns = columns_spec(
          choices = c("ARMCD", "ACTARMCD"),
          selected = "ARMCD",
          multiple = FALSE,
          fixed = FALSE,
          label = "Variable"
        )
      ),
      row_facet = data_extract_spec(
        dataname = "ADLB",
        filter = list(
          filter_spec(
            vars = "PARAMCD",
            choices = levels(ADLB$PARAMCD),
            selected = levels(ADLB$PARAMCD)[1],
            multiple = FALSE,
            label = "Choose endpoint"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ADLB$AVISIT),
            selected = levels(ADLB$AVISIT)[1],
            multiple = FALSE,
            label = "Choose visit"
          )
        ),
        columns = columns_spec(
          choices = c("", "SEX", "RACE"),
          selected = "",
          multiple = FALSE,
          fixed = FALSE,
          label = "Variable"
        )
      ),
      col_facet = data_extract_spec(
        dataname = "ADLB",
        filter = list(
          filter_spec(
            vars = "PARAMCD",
            choices = levels(ADLB$PARAMCD),
            selected = levels(ADLB$PARAMCD)[1],
            multiple = FALSE,
            label = "Choose endpoint"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ADLB$AVISIT),
            selected = levels(ADLB$AVISIT)[1],
            multiple = FALSE,
            label = "Choose visit"
          )
        ),
        columns = columns_spec(
          choices = c("", "SEX", "RACE"),
          selected = "",
          multiple = FALSE,
          fixed = FALSE,
          label = "Variable"
        )
      )
    )
  )
)

\dontrun{
shinyApp(app$ui, app$server)
}
}
