% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_a_kmeans.R
\name{tm_a_kmeans}
\alias{tm_a_kmeans}
\title{\code{teal} module: Scatterplot and k-means clustering}
\usage{
tm_a_kmeans(
  label = "k-means Clustering",
  dat,
  clusters = 3,
  algorithm = c("Hartigan-Wong", "Lloyd", "Forgy", "MacQueen"),
  iter.max = 10,
  plot_height = c(600, 200, 2000),
  plot_width = NULL,
  alpha = c(1, 0, 1),
  size = c(2, 1, 8),
  ggtheme = c("gray", "bw", "linedraw", "light", "dark", "minimal", "classic", "void"),
  ggplot2_args = teal.widgets::ggplot2_args(),
  pre_output = NULL,
  post_output = NULL
)
}
\arguments{
\item{label}{(\code{character(1)}) Label shown in the navigation item for the module or module group.
For \code{modules()} defaults to \code{"root"}. See \code{Details}.}

\item{dat}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Variables used for the creation of clusters with filtering and selecting.}

\item{clusters}{(\code{integer(1)}) number of clusters.}

\item{algorithm}{(\code{character(1)}) name of the clustering algorithm to be used. See more \code{stats::kmeans}.}

\item{iter.max}{(\code{integer(1)}) maximum number of iterations allowed.}

\item{plot_height}{(\code{numeric}) optional, specifies the plot height as a three-element vector of
\code{value}, \code{min}, and \code{max} intended for use with a slider UI element.}

\item{plot_width}{(\code{numeric}) optional, specifies the plot width as a three-element vector of
\code{value}, \code{min}, and \code{max} for a slider encoding the plot width.}

\item{alpha}{(\code{integer(1)} or \code{integer(3)}) optional, specifies point opacity.
\itemize{
\item When the length of \code{alpha} is one: the plot points will have a fixed opacity.
\item When the length of \code{alpha} is three: the plot points opacity are dynamically adjusted based on
vector of \code{value}, \code{min}, and \code{max}.
}}

\item{size}{(\code{integer(1)} or \code{integer(3)}) optional, specifies point size.
\itemize{
\item When the length of \code{size} is one: the plot point sizes will have a fixed size.
\item When the length of \code{size} is three: the plot points size are dynamically adjusted based on
vector of \code{value}, \code{min}, and \code{max}.
}}

\item{ggtheme}{(\code{character}) optional, \code{ggplot2} theme to be used by default. Defaults to \code{"gray"}.}

\item{ggplot2_args}{(\code{ggplot2_args}) optional, object created by \code{\link[teal.widgets:ggplot2_args]{teal.widgets::ggplot2_args()}}
with settings for all the plots or named list of \code{ggplot2_args} objects for plot-specific settings.
The argument is merged with options variable \code{teal.ggplot2_args} and default module setup.

List names should match the following: \verb{c("default", "Response vs Regressor", "Residuals vs Fitted", "Scale-Location", "Cook's distance", "Residuals vs Leverage"", "Cook's dist vs Leverage")}.

For more details see the vignette: \code{vignette("custom-ggplot2-arguments", package = "teal.widgets")}.}

\item{pre_output}{(\code{shiny.tag}) optional, text or UI element to be displayed before the module's output,
providing context or a title.
with text placed before the output to put the output into context. For example a title.}

\item{post_output}{(\code{shiny.tag}) optional, text or UI element to be displayed after the module's output,
adding context or further instructions. Elements like \code{shiny::helpText()} are useful.}
}
\value{
Object of class \code{teal_module} to be used in \code{teal} applications.
}
\description{
Module for visualizing k-means clustering, including scatterplots and
some clustering diagnostics plots. It allows users to identify clusters of similar observations
in data, based on continuous variables. Module also displays summary statistics of the goodness
of final clustering (within-cluster sum of squares).
}
\note{
For more examples, please see the vignette "Using k-means clustering" via
\code{vignette("using-kmeans-clustering", package = "teal.modules.general")}.
}
\examples{
# general data example
library(teal.widgets)

data <- teal_data()
data <- within(data, {
  iris <- iris
})
datanames(iris) <- c("iris")

app <- init(
  data = data,
  modules = modules(
    tm_a_kmeans(
      label = "k-means Clustering",
      dat = data_extract_spec(
        dataname = "iris",
        select = select_spec(
          label = "Select variables:",
          choices = variable_choices(
            data[["iris"]],
            c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")
          ),
          selected = c("Sepal.Length", "Sepal.Width"),
          multiple = TRUE,
          fixed = FALSE
        )
      ),
      ggplot2_args = ggplot2_args(
        labs = list(subtitle = "Plot generated by k-means Module")
      )
    )
  )
)
if (interactive()) {
  shinyApp(app$ui, app$server)
}

}
