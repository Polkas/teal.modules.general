% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_g_scatterplotmatrix.R
\name{tm_g_scatterplotmatrix}
\alias{tm_g_scatterplotmatrix}
\title{Create a scatterplot matrix}
\usage{
tm_g_scatterplotmatrix(label = "Scatterplot matrix", dataname, selected,
  plot_height = c(600, 200, 2000), pre_output = NULL,
  post_output = NULL)
}
\arguments{
\item{label}{label shown in the navigation for the item}

\item{dataname}{Name of datasets used to generate the regression plot (just used for labeling).}

\item{selected}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Plotting variables from an incoming dataset with filtering and selecting.}

\item{plot_height}{(\code{numeric}) A vector of length three with \code{c(value, min and max)} for a slider
encoding the plot height.}

\item{pre_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}

\item{post_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}
}
\description{
Create a scatterplot matrix
}
\examples{
library(random.cdisc.data)
library(tern)

ASL <- cadsl
ADTE <- radtte(ASL, seed = 1, event.descr = c("STUDYID", "USUBJID", "PARAMCD"))
keys(ASL) <- c("STUDYID", "USUBJID")
keys(ADTE) <- c("STUDYID", "USUBJID", "PARAMCD")

app <- init(
  data = cdisc_data(
       ASL = ASL,
       ADTE = ADTE,
       code = 'ASL <- cadsl
               ADTE <- radtte(ASL, seed = 1, event.descr = c("STUDYID", "USUBJID", "PARAMCD"))
               keys(ASL) <- c("STUDYID", "USUBJID")
               keys(ADTE) <- c("STUDYID", "USUBJID", "PARAMCD")
               ',
       check = FALSE),
  modules = root_modules(
    tm_g_scatterplotmatrix(
      label = "Scatterplot matrix",
      dataname = c("ASL","ADTE"),
      selected = data_extract_spec(
        dataname = "ADTE",
        filter = filter_spec(
          vars = c("PARAMCD"),
          sep = " - ",
          choices = c("OS", "PFS", "EFS"),
          selected = "OS",
          multiple = TRUE,
          label = "Choose endpoint"
        ),
        columns = columns_spec(
          label = "Selected columns",
          choices = colnames(ADTE),
          selected = if (all(c('AGE', 'SEX') \%in\% colnames(ADTE))) {
            c('AGE', 'SEX')
          } else {
            colnames(ADTE)[1:2]
          },
          multiple = TRUE,
          fixed = FALSE
        )
      )
    )
  )
)

\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: multiple long datasets
library(random.cdisc.data)

ASL <- cadsl
ADRS <- cadrs
ADTTE <- cadtte

app <- init(
  data = cdisc_data(
    ASL = ASL,
    ADRS = ADRS,
    ADTTE = ADTTE,
    code = "ASL <- cadsl; ADRS <- cadrs; ADTTE <- cadtte",
    check = FALSE
  ),
  modules = root_modules(
    tm_g_scatterplotmatrix(
      label = "Scatterplot matrix on two long datasets",
      dataname = c("ASL", "ADRS", "ADTTE"),
      selected = list(
        data_extract_spec(
          dataname = "ASL",
          columns = columns_spec(
            choices = names(ASL),
            selected = c("AGE", "SEX"),
            multiple = TRUE,
            fixed = FALSE
          )
        ),
        data_extract_spec(
          dataname = "ADRS",
          columns = columns_spec(
            choices = names(ADRS),
            selected = c("AVAL", "AVALC"),
            multiple = TRUE,
            fixed = FALSE
          ),
          filter = filter_spec(
            vars = c("PARAMCD", "AVISIT"),
          choices = apply(expand.grid(unique(ADRS$PARAMCD), unique(ADRS$AVISIT)), 1, paste, collapse = " - "),
            selected = "OVRINV - Screening",
            multiple = TRUE
          )
        ),
        data_extract_spec(
          dataname = "ADTTE",
          columns = columns_spec(
            choices = names(ADTTE),
            selected = c("AVAL", "CNSR"),
            multiple = TRUE,
            fixed = FALSE
          ),
          filter = filter_spec(
            vars = c("PARAMCD"),
            choices = unique(ADTTE$PARAMCD),
            selected = "OS",
            multiple = TRUE
          )
        )
      )
    )
  )
)

\dontrun{
shinyApp(app$ui, app$server)
}
}
