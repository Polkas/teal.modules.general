% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_scatterplot.R
\name{tm_scatterplot}
\alias{tm_scatterplot}
\title{Create a simple scatterplot}
\usage{
tm_scatterplot(label, dataname, x, y, color_by = NULL,
  plot_height = c(600, 200, 2000), alpha = c(1, 0, 1), size = c(4, 1,
  12), pre_output = NULL, post_output = NULL)
}
\arguments{
\item{label}{label shown in the navigation for the item}

\item{dataname}{name of dataset used to generate plot}

\item{x}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
x variable}

\item{y}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
y variable}

\item{color_by}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Defines the color encoding. If
\code{NULL} then no color encoding option will be displayed. Note
\code{_none_} is a keyword and means that no color encoding should be used.}

\item{plot_height}{if scalar then the plot will have a fixed height. If a
slider should be presented to adjust the plot height dynamically then it
can be a vector of length three with \code{c(value, min and max)}.}

\item{alpha}{if scalar then the plot points will have a fixed opacity. If a
slider should be presented to adjust the plot point opacity dynamically
then it can be a vector of length three with vlaue, min and max.}

\item{size}{if scalar then the plot points sizes will have a fixed opacity.
If a slider should be presented to adjust the plot point sizes dynamically
then it can be a vector of length three with vlaue, min and max.}

\item{pre_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}

\item{post_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}
}
\description{
Create a plot with the \code{\link{plot}[base]} function
}
\examples{

# datasets: single wide

library(random.cdisc.data)

ASL <- cadsl

app <- init(
  data = cdisc_data(
    ASL = ASL,
    code = "ASL <- cadsl",
    check = FALSE),
  modules = root_modules(
    tm_scatterplot(
      "Scatterplot Choices",
      dataname = "ASL",
      x = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(
          choices = c("AGE", "BMRKR1", "BMRKR2"),
          selected = "AGE",
          multiple = FALSE,
          fixed = FALSE,
          label = "x variable"
        )
      ),
      y = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(
          choices = c("AGE", "BMRKR1", "BMRKR2"),
          selected = "BMRKR1",
          multiple = FALSE,
          fixed = FALSE,
          label = "y variable"
        )
      ),
      color_by = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(
          choices = c("RACE"),
          selected = "RACE", # todo: how to select nothing
          multiple = TRUE, #todo: 0 or 1
          fixed = FALSE,
          label = "color by"
        )
      )
    )
  )
)
\dontrun{
  shinyApp(app$ui, app$server)
}

# datasets: different wide

library(random.cdisc.data)
library(tern)
library(dplyr)

ASL <- cadsl
ASL <- mutate_at(ASL,
  .vars = vars(c("ARM", "ACTARM", "ACTARMCD", "SEX", "STRATA1", "STRATA2")),
  .funs = funs(as.factor(.))
) \%>\% select(
  "ARM", "ACTARM", "ACTARMCD",
  "SEX", "BMRKR1", "BMRKR2", "AGE", "USUBJID", "STUDYID"
)
keys(ASL) <- c("STUDYID", "USUBJID")


ADSL_2 <- mutate_at(cadsl,
  .vars = vars(c("ARM", "ACTARM", "ACTARMCD", "SEX", "STRATA1", "STRATA2")),
  .funs = funs(as.factor(.))
) \%>\% select("ACTARM", "AGE", "STRATA2", "COUNTRY", "USUBJID", "STUDYID")
keys(ADSL_2) <- c("STUDYID", "USUBJID")

app <- init(
  data = cdisc_data(
    ASL = ASL,
    ADSL_2 = ADSL_2,
    code = 'ASL <- cadsl
ADSL_2 <- mutate_at(cadsl,
.vars = vars(c("ARM", "ACTARM", "ACTARMCD", "SEX", "STRATA1", "STRATA2")),
.funs = funs(as.factor(.))) \%>\% select("ACTARM", "AGE", "STRATA2", "COUNTRY", "USUBJID", "STUDYID")
keys(ASL) <- keys(ADSL_2) <- c("STUDYID", "USUBJID")',
    check = FALSE
  ),
  modules = root_modules(
    tm_scatterplot("Scatterplot for different wide data",
     dataname = c("ASL", "ADSL_2"),
     x = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(
         label = "Select variable",
          choices = c("BMRKR1", "BMRKR2"),
          selected = c("BMRKR1"),
          multiple = FALSE
        )),
      y = data_extract_spec(
        dataname = "ADSL_2",
        columns = columns_spec(
          label = "Select variables",
          choices = c("AGE", "RACE"),
          selected = "AGE",
          multiple = FALSE
        )),
      color_by = data_extract_spec(
        dataname = "ADSL_2",
        columns = columns_spec(
          label = "Select variables",
          choices = c("COUNTRY", "AGE", "RACE"),
          selected = "COUNTRY",
          multiple = FALSE
        ))
     )
   )
)

\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: multiple long datasets
library(random.cdisc.data)

ASL <- cadsl
ADRS <- cadrs
ADTTE <- cadtte

app <- init(
  data = cdisc_data(
    ASL = ASL,
    ADRS = ADRS,
    ADTTE = ADTTE,
    code = "ASL <- cadsl; ADRS <- cadrs; ADTTE <- cadtte",
    check = FALSE
  ),
  modules = root_modules(
    tm_scatterplot(
      label = "Scatterplot on two long datasets",
      dataname = c("ASL", "ADRS", "ADTTE"),
      x = data_extract_spec(
        dataname = "ADRS",
        columns = columns_spec(
          choices = names(ADRS),
          selected = "AVAL",
          multiple = FALSE,
          fixed = FALSE
        ),
        filter = filter_spec(
          vars = c("PARAMCD", "AVISIT"),
          choices = apply(expand.grid(unique(ADRS$PARAMCD), unique(ADRS$AVISIT)), 1, paste, collapse = " - "),
          selected = "OVRINV - Screening",
          multiple = FALSE
        )
      ),
      y = data_extract_spec(
        dataname = "ADTTE",
        columns = columns_spec(
          choices = names(ADTTE),
          selected = "AVAL",
          multiple = FALSE,
          fixed = FALSE
        ),
        filter = filter_spec(
          vars = c("PARAMCD"),
          choices = unique(ADTTE$PARAMCD),
          selected = "OS",
          multiple = TRUE
        )
      ),
      color_by = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(
          choices = c("AGE", "SEX"),
          selected = "AGE",
          multiple = FALSE,
          fixed = FALSE
        )
      )
    )
  )
)

\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: wide, long

library(random.cdisc.data)
library(tern)

ASL <- cadsl
ADRS <- cadrs
keys(ASL) <- c("STUDYID", "USUBJID")
keys(ADRS) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")

app <- init(
  data = cdisc_data(
    ASL = ASL,
    ADRS = ADRS,
    code = 'ASL <- cadsl
ADRS <- cadrs
keys(ASL) <- c("STUDYID", "USUBJID")
keys(ADRS) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")',
    check = FALSE
  ),
  modules = root_modules(
   tm_scatterplot("Scatterplot for wide and long data",
     dataname = c("ASL", "ADRS"),
     x = data_extract_spec(
          dataname = "ASL",
          columns = columns_spec(
            choices = c("SEX", "AGE", "RACE", "COUNTRY"),
            selected = "AGE",
            multiple = FALSE,
            fixed = FALSE
          )
        ),
     y = data_extract_spec(
          dataname = "ADRS",
          filter = list(
            filter_spec(
              vars = "PARAM",
              choices = unique(ADRS$PARAM),
              selected = unique(ADRS$PARAM)[1],
              multiple = FALSE,
              label = "Choose response"
            ),
            filter_spec(
              vars = "AVISIT",
              choices = levels(ADRS$AVISIT),
              selected = levels(ADRS$AVISIT)[1],
              multiple = FALSE,
              label = "Choose visit"
            )
          ),
          columns = columns_spec(
            choices = "AVAL",
            selected = "AVAL",
            multiple = FALSE,
            label = "variable"
          )
        ),
     color_by = data_extract_spec(
          dataname = "ASL",
          columns = columns_spec(
            choices = c("SEX", "AGE", "RACE", "COUNTRY"),
            selected = NULL,
            multiple = FALSE,
            fixed = FALSE
          )
        )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}

}
