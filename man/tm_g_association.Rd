% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_g_association.R
\name{tm_g_association}
\alias{tm_g_association}
\title{Stack Plots of variables and show association with reference variable}
\usage{
tm_g_association(label = "Association", ref, vars,
  show_association = TRUE, plot_height = c(600, 400, 5000),
  pre_output = NULL, post_output = NULL, with_show_r_code = TRUE)
}
\arguments{
\item{label}{label shown in the navigation for the item}

\item{ref}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
reference variable, must set \code{multiple = FALSE}}

\item{vars}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
associated variables}

\item{show_association}{(\code{logical}) wheater show association of \code{vars} with refference variable}

\item{plot_height}{(\code{numeric}) vector with three elements defining selected, min and max plot height}

\item{pre_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}

\item{post_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}

\item{with_show_r_code}{(\code{logical}) Whether show R Code button shall be enabled}
}
\description{
Stack Plots of variables and show association with reference variable
}
\examples{

# datasets: single wide
# Association plot of selected reference variable (SEX)
# against other selected variables (BMRKR1)
library(random.cdisc.data)
ADSL <- cadsl

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL", ADSL),
    code = "ADSL <- cadsl",
    check = FALSE
  ),
  modules = root_modules(
    tm_g_association(
      ref = data_extract_spec(
        dataname = "ADSL",
        select = select_spec(
          label = "Select Variable",
          choices = names(ADSL),
          selected = "AGE",
          fixed = FALSE
        )
      ),
      vars = data_extract_spec(
        dataname = "ADSL",
        select = select_spec(
          label = "Select Variables",
          choices = names(ADSL),
          selected = "BMRKR1",
          multiple = TRUE,
          fixed = FALSE
        )
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: different wide
# Create an association plot with the stratification (STRATA1) as the reference
# and the AGE, COUNTRY, RACE as plotted variables

library(random.cdisc.data)
library(tern)
library(dplyr)

ADSL <- cadsl
ADSL <- mutate_at(ADSL,
                 .vars = vars(c("ARM", "ACTARM", "ACTARMCD", "SEX", "STRATA1", "STRATA2")),
                 .funs = list(~as.factor(.))) \%>\% select("ARM", "ACTARM", "ACTARMCD",
                 "SEX", "STRATA1", "AGE", "USUBJID", "STUDYID", "STRATA2")
keys(ADSL) <- c("STUDYID", "USUBJID")


ADSL_2 <- mutate_at(cadsl,
                 .vars = vars(c("ARM", "ACTARM", "ACTARMCD", "SEX", "STRATA1", "STRATA2")),
                 .funs = list(~as.factor(.))) \%>\% select("ACTARM", "AGE", "STRATA2",
                 "COUNTRY", "USUBJID", "STUDYID")
keys(ADSL_2) <- c("STUDYID", "USUBJID")

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL", ADSL),
    dataset("ADSL_2", ADSL_2),
    code = 'ADSL <- cadsl
            keys(ADSL) <- c("STUDYID", "USUBJID")',
    check = FALSE),
  modules = root_modules(
    tm_g_association(
      label = "Regression",
      ref = data_extract_spec(
        dataname = "ADSL",
        select = select_spec(
          label = "Select Variable",
          choices = c("AGE", "SEX", "STRATA1", "RACE"),
          selected = c("STRATA1"),
          multiple = FALSE,
          fixed = FALSE
        )),
      vars = data_extract_spec(
        dataname = "ADSL_2",
        select = select_spec(
          label = "Select Variables",
          choices = c("COUNTRY", "AGE", "RACE"),
          selected = c("AGE", "COUNTRY", "RACE"),
          multiple = TRUE,
          fixed = FALSE
        ))
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: multiple long datasets
# Association plot of different parameters from ADRS or ADTTE datasets
library(random.cdisc.data)

ADSL <- cadsl
ADRS <- cadrs
ADTTE <- cadtte

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL", ADSL),
    cdisc_dataset("ADRS", ADRS),
    cdisc_dataset("ADTTE", ADTTE),
    code = "ADSL <- cadsl; ADRS <- cadrs; ADTTE <- cadtte",
    check = FALSE
  ),
  modules = root_modules(
    tm_g_association(
      ref = list(
        data_extract_spec(
          dataname = "ADRS",
          select = select_spec(
            label = "Select Variable",
            choices = c("AGE", "SEX"),
            selected = "AGE",
            multiple = FALSE,
            fixed = FALSE
          )
        ),
        data_extract_spec(
          dataname = "ADTTE",
          select = select_spec(
            label = "Select Variable",
            choices = c("AVAL", "CNSR"),
            selected = "AVAL",
            multiple = FALSE,
            fixed = FALSE
          )
        )
      ),
      vars = list(
        data_extract_spec(
          dataname = "ADRS",
          select = select_spec(
            label = "Select Variables",
            choices = names(ADRS),
            selected = c("AVAL", "AVALC"),
            multiple = TRUE,
            fixed = FALSE
          ),
          filter = filter_spec(
            label = "Select Parameter",
            vars = "PARAMCD",
            choices = unique(ADTTE$PARAMCD),
            selected = "OS",
            multiple = FALSE
          )
        ),
        data_extract_spec(
          dataname = "ADTTE",
          filter = filter_spec(
            label = "Select Endpoints",
            vars = c("PARAMCD", "AVISIT"),
            choices = apply(expand.grid(levels(ADRS$PARAMCD),
            levels(ADRS$AVISIT)), 1, paste, collapse = " - "),
            selected = "OVRINV - Screening",
            multiple = TRUE
          ),
          select = select_spec(
            label = "Select Variables",
            choices = names(ADTTE),
            selected = NULL,
            multiple = TRUE,
            fixed = FALSE
          )
        )
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: wide and long
# Create an association plot with the patient AGE (ADSL$AGE) as the reference
# and a measurement the response time filtered by visit and response as
# the plotted variable
library(random.cdisc.data)
library(tern)

ADSL <- cadsl
ADRS <- cadrs

keys(ADSL) <- c("STUDYID", "USUBJID")
keys(ADRS) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")

app <- init(
 data = cdisc_data(
   cdisc_dataset("ADSL", ADSL),
   cdisc_dataset("ADRS", ADRS),
   code = 'ADSL <- cadsl
           ADRS <- cadrs
           keys(ADSL) <- c("STUDYID", "USUBJID")
           keys(ADRS) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")',
   check = FALSE),
 modules = root_modules(
   tm_g_association(
     label = "Association Plots",
     ref = data_extract_spec(
       dataname = "ADSL",
       select = select_spec(
         choices = c("SEX", "AGE", "RACE", "COUNTRY"),
         selected = c("AGE"),
         multiple = FALSE,
         fixed = FALSE,
         label = "Select Variable"
      )
     ),
     vars = data_extract_spec(
       dataname = "ADRS",
       filter = list(
         filter_spec(
           vars = "PARAM",
           choices = levels(ADRS$PARAM),
           selected = levels(ADRS$PARAM)[1],
           multiple = FALSE,
           label = "Choose response"
         ),
         filter_spec(
           vars = "AVISIT",
           choices = levels(ADRS$AVISIT),
           selected = levels(ADRS$AVISIT)[1],
           multiple = FALSE,
           label = "Choose visit"
         )
       ),
       select = select_spec(
         choices = "AVAL",
         selected = "AVAL",
         multiple = FALSE,
         fixed = TRUE,
         label = "Selected Variable"
       )
      )
    )
  )
)

\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: same long
# Examine association between two different variables from ADRS dataset.

library(random.cdisc.data)
library(tern)

ADSL <- cadsl
ADRS <- cadrs

keys(ADSL) <- c("STUDYID", "USUBJID")
keys(ADRS) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")

app <- init(
 data = cdisc_data(
   cdisc_dataset("ADSL", ADSL),
   cdisc_dataset("ADRS", ADRS),
   code = 'ADSL <- cadsl
           ADRS <- cadrs
           keys(ADSL) <- c("STUDYID", "USUBJID")
           keys(ADRS) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")',
   check = FALSE),
 modules = root_modules(
   tm_g_association(
     label = "Association Plots",
     ref = data_extract_spec(
       dataname = "ADRS",
       select = select_spec(
         choices = names(ADRS),
         selected = "AVAL",
         multiple = FALSE,
         fixed = FALSE,
         label = "Select Variable"
      )
     ),
     vars = data_extract_spec(
       dataname = "ADRS",
       select = select_spec(
         choices = names(ADRS),
         selected = "PARAMCD",
         multiple = FALSE,
         fixed = FALSE,
         label = "Select Variable"
       )
      )
    )
  )
)

\dontrun{
shinyApp(app$ui, app$server)
}


# datasets: different subsets of long dataset
# Examine association between two different measurements from ALB dataset.

library(random.cdisc.data)
library(tern)

ADSL <- cadsl
ADLB <- cadlb

keys(ADSL) <- c("STUDYID", "USUBJID")
keys(ADLB) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL", ADSL),
    cdisc_dataset("ADLB", ADLB),
    code = 'ADSL <- cadsl
           ADLB <- cadlb
           keys(ADSL) <- c("STUDYID", "USUBJID")
           keys(ADLB) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")',
    check = FALSE
  ),
  modules = root_modules(
    tm_g_association(
      ref = data_extract_spec(
        dataname = "ADLB",
        filter = list(
          filter_spec(
            vars = "PARAMCD",
            choices = levels(ADLB$PARAMCD),
            selected = levels(ADLB$PARAMCD)[1],
            multiple = FALSE,
            label = "Lab"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ADLB$AVISIT),
            selected = levels(ADLB$AVISIT)[1],
            multiple = FALSE,
            label = "Visit"
          )
        ),
        select = select_spec(
          choices = "AVAL",
          selected = "AVAL",
          multiple = FALSE,
          fixed = TRUE
        )
      ),
      vars = data_extract_spec(
        dataname = "ADLB",
        filter = list(
          filter_spec(
            vars = "PARAMCD",
            choices = levels(ADLB$PARAMCD),
            selected = levels(ADLB$PARAMCD)[2:3],
            multiple = TRUE,
            label = "Lab"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ADLB$AVISIT),
            selected = levels(ADLB$AVISIT)[1],
            multiple = FALSE,
            label = "Visit"
          )
        ),
        select = select_spec(
          choices = "AVAL",
          selected = "AVAL",
          multiple = FALSE,
          fixed = TRUE
        )
      )
    )
  )
)

\dontrun{
shinyApp(app$ui, app$server)
}
}
