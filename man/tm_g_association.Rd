% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_g_association.R
\name{tm_g_association}
\alias{tm_g_association}
\title{Stack Plots of variables and show association with reference variable}
\usage{
tm_g_association(label = "Association", dataname, ref, vars,
  show_association = TRUE, plot_height = c(600, 400, 5000),
  pre_output = NULL, post_output = NULL, with_show_r_code = TRUE)
}
\arguments{
\item{label}{label shown in the navigation for the item}

\item{dataname}{(\code{character}) data set name to analyze}

\item{ref}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
reference variable, must set \code{multiple = FALSE}}

\item{vars}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
associated variables}

\item{show_association}{(\code{logical}) wheater show association of \code{vars} with refference variable}

\item{plot_height}{(\code{numeric}) vector with three elements defining selected, min and max plot height}

\item{pre_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}

\item{post_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}

\item{with_show_r_code}{(\code{logical}) Whether show R Code button shall be enabled}
}
\description{
Stack Plots of variables and show association with reference variable
}
\examples{

# datasets: single wide
library(random.cdisc.data)
ADSL <- cadsl

app <- init(
  data = cdisc_data(
    ADSL = ADSL,
    code = "ADSL <- cadsl",
    check = FALSE
  ),
  modules = root_modules(
    tm_g_association(
      dataname = "ADSL",
      ref = data_extract_spec(
        dataname = "ADSL",
        columns = columns_spec(label = "Reference variable",
                               choices = names(ADSL),
                               selected = "AGE",
                               fixed = FALSE)
      ),
      vars = data_extract_spec(
        dataname = "ADSL",
        columns = columns_spec(label = "Associated variables",
                               choices = names(ADSL),
                               selected = "SEX",
                               multiple = TRUE,
                               fixed = FALSE)
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: multiple long datasets
library(random.cdisc.data)

ADSL <- cadsl
ADRS <- cadrs
ADTTE <- cadtte

app <- init(
  data = cdisc_data(
    ADSL = ADSL,
    ADRS = ADRS,
    ADTTE = ADTTE,
    code = "ADSL <- cadsl; ADRS <- cadrs; ADTTE <- cadtte",
    check = FALSE
  ),
  modules = root_modules(
    tm_g_association(
      dataname = c("ADSL", "ADRS", "ADTTE"),
      ref = list(
        data_extract_spec(
          dataname = "ADRS",
          columns = columns_spec(
            label = "Reference variable",
            choices = c("AVAL", "AVALC"),
            selected = "AVAL",
            fixed = FALSE
          )
        ),
        data_extract_spec(
          dataname = "ADTTE",
          columns = columns_spec(
            label = "Reference variable",
            choices = c("AVAL", "CNSR"),
            selected = "AVAL",
            fixed = FALSE
          )
        )
      ),
      vars = list(
        data_extract_spec(
          dataname = "ADRS",
          columns = columns_spec(
            label = "Associated variables",
            choices = names(ADRS),
            selected = c("AGE", "SEX"),
            fixed = FALSE
          ),
          filter = filter_spec(
            vars = c("PARAMCD"),
            choices = unique(ADTTE$PARAMCD),
            selected = "OS",
            multiple = FALSE,
            label = "ADTTE filter"
          )
        ),
        data_extract_spec(
          dataname = "ADTTE",
          columns = columns_spec(
            label = "Associated variables",
            choices = names(ADTTE),
            selected = NULL,
            fixed = FALSE
          ),
          filter = filter_spec(
            vars = c("PARAMCD", "AVISIT"),
            choices = apply(expand.grid(unique(ADRS$PARAMCD), unique(ADRS$AVISIT)), 1, paste, collapse = " - "),
            selected = "OVRINV - Screening",
            multiple = TRUE,
            label = "ADRS filter"
          )
        )
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}
}
