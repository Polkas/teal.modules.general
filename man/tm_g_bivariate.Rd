% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_g_bivariate.R
\name{tm_g_bivariate}
\alias{tm_g_bivariate}
\title{Univariate and bivariate visualizations.}
\usage{
tm_g_bivariate(label = "Bivariate Plots", dataname, x, y, row_facet,
  col_facet, colour = NULL, fill = NULL, size = NULL,
  use_density = FALSE, expert_settings = TRUE, free_x_scales = FALSE,
  free_y_scales = FALSE, plot_height = c(600, 200, 2000),
  ggtheme = "minimal", with_show_r_code = TRUE, pre_output = NULL,
  post_output = NULL)
}
\arguments{
\item{label}{(\code{character}) Label of the module}

\item{dataname}{(\code{character}) name of datasets used to generate the bivariate plot. You need
to name all datasets used in the available \code{data_extract_spec}}

\item{x}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Variable name selected to plot along the x-axis by default. Variable can be numeric, factor or character.
No empty selections are allowed!}

\item{y}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Variable name selected to plot along the y-axis by default. Variable can be numeric, factor or character.}

\item{row_facet}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Variable for row facetting}

\item{col_facet}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Variable for col facetting}

\item{colour}{optional, (\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Variable selection for the colouring inside the expert settings}

\item{fill}{optional, (\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Variable selection for the filling inside the expert settings}

\item{size}{optional, (\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Variable selection for the size of \code{geom_point} plots inside the expert settings}

\item{use_density}{(\code{logical}) value for whether density (\code{TRUE}) is plotted or frequency (\code{FALSE})}

\item{expert_settings}{(\code{logical}) Whether coloring, filling and size should be chosen
by the user}

\item{free_x_scales}{(\code{logical}) If X scaling shall be changeable}

\item{free_y_scales}{(\code{logical}) If Y scaling shall be changeable}

\item{plot_height}{(\code{numeric}) \code{c(value, min and max)} of plot height slider}

\item{ggtheme}{(\code{character}) ggplot theme to be used by default. All themes can be chosen by the user.}

\item{with_show_r_code}{(\code{logical}) Whether show R code button shall be shown}

\item{pre_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}

\item{post_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}
}
\description{
Univariate and bivariate visualizations.
}
\details{
This is a general module to visualize 1 & 2 dimensional data.
}
\examples{
# datasets: single wide
library(random.cdisc.data)
ASL <- cadsl

app <- init(
  data = cdisc_data(
    ASL = ASL,
    code = "ASL <- cadsl",
    check = FALSE
  ),
  modules = root_modules(
    tm_g_bivariate(
      dataname = "ASL",
      x = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(label = "Reference variable",
                               choices = names(ASL),
                               selected = "AGE",
                               multiple = FALSE,
                               fixed = FALSE)
      ),
      y = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(label = "Associated variables",
                               choices = names(ASL),
                               selected = "RACE",
                               multiple = FALSE,
                               fixed = FALSE)
      ),
      row_facet = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(label = "Associated variables",
                               choices = names(ASL),
                               selected = "SEX",
                               multiple = FALSE,
                               fixed = FALSE)
      ),
      col_facet = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(label = "Associated variables",
                               choices = names(ASL),
                               selected = NULL,
                               multiple = FALSE,
                               fixed = FALSE)
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: different wide

library(random.cdisc.data)
library(tern)
library(dplyr)

ASL <- cadsl
ASL <- mutate_at(ASL,
 .vars = vars(c("ARM", "ACTARM", "ACTARMCD", "SEX", "STRATA1", "STRATA2")),
 .funs = funs(as.factor(.))) \%>\% select("ARM", "ACTARM", "ACTARMCD",
 "SEX", "STRATA1", "AGE", "USUBJID", "STUDYID", "STRATA2")
keys(ASL) <- c("STUDYID", "USUBJID")


ADSL_2 <- mutate_at(cadsl,
  .vars = vars(c("ARM", "ACTARM", "ACTARMCD", "SEX", "STRATA1", "STRATA2")),
  .funs = funs(as.factor(.))) \%>\% select("ACTARM", "AGE", "STRATA2", "COUNTRY", "USUBJID", "STUDYID")
keys(ADSL_2) <- c("STUDYID", "USUBJID")


app <- init(
  data = cdisc_data(
    ASL = ASL,
    ADSL_2 = ADSL_2,
    code = 'ASL <- cadsl
            ADSL_2 <- mutate_at(cadsl,
               .vars = vars(c("ARM", "ACTARM", "ACTARMCD", "SEX", "STRATA1", "STRATA2")),
               .funs = funs(as.factor(.))) \%>\% select("ACTARM", "AGE", "STRATA2", "COUNTRY", "USUBJID", "STUDYID")
            keys(ASL) <- keys(ADSL_2) <- c("STUDYID", "USUBJID")',
    check = FALSE),
  modules = root_modules(
    tm_g_bivariate(
      label = "Association plots",
      dataname = c("ASL", "ADSL_2"),
      x = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(
         label = "Select variable",
          choices = c("AGE", "SEX", "STRATA1", "RACE"),
          selected = c("AGE"),
          multiple = FALSE
        )),
      y = data_extract_spec(
        dataname = "ADSL_2",
        columns = columns_spec(
          label = "Select variables",
          choices = c("COUNTRY", "AGE", "RACE"),
          selected = "RACE",
          multiple = FALSE
        )),
      row_facet = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(label = "Associated variables",
                               choices = names(ASL),
                               selected = "SEX",
                               multiple = FALSE,
                               fixed = FALSE)
      ),
      col_facet = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(label = "Associated variables",
                               choices = names(ASL),
                               selected = NULL,
                               multiple = FALSE,
                               fixed = FALSE)
      )
    ) #tm_g_regression
  )# root_modules
)# init
\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: wide, long

library(random.cdisc.data)
library(tern)

ASL <- cadsl
ADRS <- cadrs

keys(ASL) <- c("STUDYID", "USUBJID")
keys(ADRS) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")

app <- init(
 data = cdisc_data(
   ASL = ASL,
   ADRS = ADRS,
   code = 'ASL <- cadsl
           ADRS <- cadrs
           keys(ASL) <- c("STUDYID", "USUBJID")
           keys(ADRS) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")',
   check = FALSE),
 modules = root_modules(
   tm_g_bivariate(
     label = "Association Plots",
     dataname = c("ASL", "ADRS"),
     x = data_extract_spec(
       dataname = "ADRS",
       filter = list(
         filter_spec(
           vars = "PARAM",
          choices = unique(ADRS$PARAM),
           selected = unique(ADRS$PARAM)[1],
           multiple = FALSE,
           label = "Choose response"
         ),
         filter_spec(
           vars = "AVISIT",
           choices = levels(ADRS$AVISIT),
           selected = levels(ADRS$AVISIT)[1],
           multiple = FALSE,
           label = "Choose visit"
         )
       ),
       columns = columns_spec(
         choices = "AVAL",
         selected = "AVAL",
         multiple = FALSE,
         label = "variable"
       )
    ),
     y = data_extract_spec(
       dataname = "ASL",
       columns = columns_spec(
         choices = c("SEX", "AGE", "RACE", "COUNTRY"),
         selected = "AGE",
         multiple = FALSE,
         fixed = FALSE
      )
     ),
     row_facet = data_extract_spec(
        dataname = "ADRS",
        filter = list(
          filter_spec(
            vars = "PARAM",
            choices = unique(ADRS$PARAM),
            selected = unique(ADRS$PARAM)[1],
            multiple = FALSE,
            label = "Choose endpoint"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ADRS$AVISIT),
            selected = levels(ADRS$AVISIT)[1],
            multiple = FALSE,
            label = "Choose visit"
          )
        ),
        columns = columns_spec(
          choices = c("__NONE__", "AVAL"),
          selected = NULL,
          multiple = FALSE,
          fixed = FALSE,
          label = "variable"
        )
      ),
     col_facet = data_extract_spec(
       dataname = "ASL",
       columns = columns_spec(
         choices = c("SEX", "AGE", "RACE", "COUNTRY"),
         selected = NULL,
         multiple = FALSE,
         fixed = FALSE
      )
     ),
    )
  )
)

\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: wide, long, long

library(random.cdisc.data)
library(tern)

ASL <- cadsl
ADRS <- cadrs
ADLB <- cadlb

keys(ASL) <- c("STUDYID", "USUBJID")
keys(ADRS) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")
keys(ADLB) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")

app <- init(
 data = cdisc_data(
   ASL = ASL,
   ADRS = ADRS,
   ADLB = ADLB,
   code = 'ASL <- cadsl
           ADRS <- cadrs
           ADLB <- cadlb
           keys(ASL) <- c("STUDYID", "USUBJID")
           keys(ADLB) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")
           keys(ADRS) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")',
   check = FALSE),
 modules = root_modules(
   tm_g_bivariate(
     label = "Association Plots",
     dataname = c("ASL", "ADRS", "ADLB"),
     x = data_extract_spec(
       dataname = "ADRS",
       filter = list(
         filter_spec(
           vars = "PARAMCD",
          choices = unique(ADRS$PARAMCD),
           selected = unique(ADRS$PARAMCD)[1],
           multiple = FALSE,
           label = "Choose response"
         ),
         filter_spec(
           vars = "AVISIT",
           choices = levels(ADRS$AVISIT),
           selected = levels(ADRS$AVISIT)[1],
           multiple = FALSE,
           label = "Choose visit"
         )
       ),
       columns = columns_spec(
         choices = "AVAL",
         selected = "AVAL",
         multiple = FALSE,
         label = "variable"
       )
    ),
     y = data_extract_spec(
       dataname = "ASL",
       columns = columns_spec(
         choices = c("SEX", "AGE", "RACE", "COUNTRY"),
         selected = "AGE",
         multiple = FALSE,
         fixed = FALSE
      )
     ),
     row_facet = data_extract_spec(
        dataname = "ADLB",
        filter = list(
          filter_spec(
            vars = "PARAM",
            choices = levels(ADLB$PARAM),
            selected = levels(ADLB$PARAM)[1],
            multiple = FALSE,
            label = "Choose measurement"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ADLB$AVISIT),
            selected = levels(ADLB$AVISIT)[1],
            multiple = FALSE,
            label = "Choose visit"
          )
        ),
        columns = columns_spec(
          choices = c("__NONE__", "AVAL"),
          selected = NULL,
          multiple = FALSE,
          fixed = FALSE,
          label = "variable"
        )
      ),
     col_facet = data_extract_spec(
       dataname = "ASL",
       columns = columns_spec(
         choices = c("SEX", "AGE", "RACE", "COUNTRY"),
         selected = NULL,
         multiple = FALSE,
         fixed = FALSE
      )
     ),
    ) #tm_g_association
  )# root_modules
)# init

\dontrun{
shinyApp(app$ui, app$server)
}

}
