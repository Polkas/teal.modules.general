% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_g_bivariate.R
\name{tm_g_bivariate}
\alias{tm_g_bivariate}
\title{Univariate and bivariate visualizations.}
\usage{
tm_g_bivariate(label = "Bivariate Plots", x, y, row_facet, col_facet,
  colour = NULL, fill = NULL, size = NULL, use_density = FALSE,
  expert_settings = TRUE, free_x_scales = FALSE,
  free_y_scales = FALSE, plot_height = c(600, 200, 2000),
  ggtheme = c("grey", "gray", "bw", "linedraw", "light", "dark",
  "minimal", "classic", "void", "test"), with_show_r_code = TRUE,
  pre_output = NULL, post_output = NULL)
}
\arguments{
\item{label}{(\code{character}) Label of the module}

\item{x}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Variable name selected to plot along the x-axis by default. Variable can be numeric, factor or character.
No empty selections are allowed!}

\item{y}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Variable name selected to plot along the y-axis by default. Variable can be numeric, factor or character.}

\item{row_facet}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Variable for row facetting}

\item{col_facet}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Variable for col facetting}

\item{colour}{optional, (\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Variable selection for the colouring inside the expert settings}

\item{fill}{optional, (\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Variable selection for the filling inside the expert settings}

\item{size}{optional, (\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Variable selection for the size of \code{geom_point} plots inside the expert settings}

\item{use_density}{(\code{logical}) value for whether density (\code{TRUE}) is plotted or frequency (\code{FALSE})}

\item{expert_settings}{(\code{logical}) Whether coloring, filling and size should be chosen
by the user}

\item{free_x_scales}{(\code{logical}) If X scaling shall be changeable}

\item{free_y_scales}{(\code{logical}) If Y scaling shall be changeable}

\item{plot_height}{(\code{numeric}) \code{c(value, min and max)} of plot height slider}

\item{ggtheme}{(\code{character}) ggplot theme to be used by default. All themes can be chosen by the user.}

\item{with_show_r_code}{(\code{logical}) Whether show R code button shall be shown}

\item{pre_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}

\item{post_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}
}
\description{
Univariate and bivariate visualizations.
}
\details{
This is a general module to visualize 1 & 2 dimensional data.
}
\examples{
# Bivariate plot of selected variable (AGE) against selected (SEX)
library(random.cdisc.data)
ADSL <- cadsl

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL", ADSL),
    code = "ADSL <- cadsl",
    check = TRUE
  ),
  modules = root_modules(
    tm_g_bivariate(
      x = data_extract_spec(
        dataname = "ADSL",
        select = select_spec(
          label = "Select variable:",
          choices = names(ADSL),
          selected = "AGE",
          fixed = FALSE
        )
      ),
      y = data_extract_spec(
        dataname = "ADSL",
        select = select_spec(
          label = "Select variable:",
          choices = names(ADSL),
          selected = "SEX",
          multiple = FALSE,
          fixed = FALSE
        )
      ),
      row_facet = data_extract_spec(
        dataname = "ADSL",
        select = select_spec(
          label = "Select variables:",
          choices = names(ADSL),
          selected = NULL,
          multiple = TRUE,
          fixed = FALSE
        )
      ),
      col_facet = data_extract_spec(
        dataname = "ADSL",
        select = select_spec(
          label = "Select variables:",
          choices = names(ADSL),
          selected = NULL,
          multiple = TRUE,
          fixed = FALSE
        )
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}
}
