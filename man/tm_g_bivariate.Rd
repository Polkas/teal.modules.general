% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_g_bivariate.R
\name{tm_g_bivariate}
\alias{tm_g_bivariate}
\title{Univariate and bivariate visualizations.}
\usage{
tm_g_bivariate(label = "Bivariate Plots", dataname, x, y, row_facet,
  col_facet, colour = NULL, fill = NULL, size = NULL,
  use_density = FALSE, expert_settings = TRUE, free_x_scales = FALSE,
  free_y_scales = FALSE, plot_height = c(600, 200, 2000),
  ggtheme = "minimal", with_show_r_code = TRUE, pre_output = NULL,
  post_output = NULL)
}
\arguments{
\item{label}{(\code{character}) Label of the module}

\item{dataname}{(\code{character}) name of datasets used to generate the bivariate plot. You need
to name all datasets used in the available \code{data_extract_spec}}

\item{x}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Variable name selected to plot along the x-axis by default. Variable can be numeric, factor or character.
No empty selections are allowed!}

\item{y}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Variable name selected to plot along the y-axis by default. Variable can be numeric, factor or character.}

\item{row_facet}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Variable for row facetting}

\item{col_facet}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Variable for col facetting}

\item{colour}{optional, (\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Variable selection for the colouring inside the expert settings}

\item{fill}{optional, (\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Variable selection for the filling inside the expert settings}

\item{size}{optional, (\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Variable selection for the size of \code{geom_point} plots inside the expert settings}

\item{use_density}{(\code{logical}) value for whether density (\code{TRUE}) is plotted or frequency (\code{FALSE})}

\item{expert_settings}{(\code{logical}) Whether coloring, filling and size should be chosen
by the user}

\item{free_x_scales}{(\code{logical}) If X scaling shall be changeable}

\item{free_y_scales}{(\code{logical}) If Y scaling shall be changeable}

\item{plot_height}{(\code{numeric}) \code{c(value, min and max)} of plot height slider}

\item{ggtheme}{(\code{character}) ggplot theme to be used by default. All themes can be chosen by the user.}

\item{with_show_r_code}{(\code{logical}) Whether show R code button shall be shown}

\item{pre_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}

\item{post_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}
}
\description{
Univariate and bivariate visualizations.
}
\details{
This is a general module to visualize 1 & 2 dimensional data.
}
\examples{
library(random.cdisc.data)
library(tern)

ASL <- cadsl
ARS <- cadrs

keys(ASL) <- c("STUDYID", "USUBJID")
keys(ARS) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")

app <- init(
  data = cdisc_data(
    ASL = ASL,
    ARS = ARS,
    code = 'ASL <- cadsl
    ARS <- cadrs
    keys(ASL) <- c("STUDYID", "USUBJID")
    keys(ARS) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")',
    check = FALSE),
  modules = root_modules(
    tm_g_bivariate(
      dataname = c("ASL","ARS"),
      x = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(
          choices = c(base::setdiff(names(ASL), keys(ASL))), # strict call of setdiff
          selected = c("AGE"),
          multiple = FALSE,
          fixed = FALSE,
          label = "variable"
        )
      ),
      y = data_extract_spec(
        dataname = "ARS",
        filter = list(
          filter_spec(
            vars = "PARAMCD",
            choices = unique(ARS$PARAMCD),
            selected = unique(ARS$PARAMCD)[1],
            multiple = FALSE,
            label = "Choose endpoint"
          ),
          filter_spec(
            vars = "AVISIT",
            choices = levels(ARS$AVISIT),
            selected = levels(ARS$AVISIT)[1],
            multiple = FALSE,
            label = "Choose endpoint"
          )
        ),
        columns = columns_spec(
          choices = c("","AVAL", "AVALC"),
          selected = "AVALC",
          multiple = FALSE,
          fixed = FALSE,
          label = "variable"
        )
      ),
      use_density = FALSE,
      row_facet = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(
          choices = c("","SEX", "RACE"),
          selected = "",
          multiple = TRUE,
          fixed = FALSE,
          label = "variable"
        )
      ),
      col_facet = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(
          choices = c("","SEX", "RACE"),
          selected = "",
          multiple = TRUE,
          fixed = FALSE,
          label = "variable"
        )
      ),
      expert_settings = TRUE,
      plot_height = c(600, 200, 2000),
      ggtheme = "grey"
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: multiple long datasets
library(random.cdisc.data)

ASL <- cadsl
ADRS <- cadrs
ADTTE <- cadtte

app <- init(
  data = cdisc_data(
    ASL = ASL,
    ADRS = ADRS,
    ADTTE = ADTTE,
    code = "ASL <- cadsl; ADRS <- cadrs; ADTTE <- cadtte",
    check = FALSE
  ),
  modules = root_modules(
    tm_g_bivariate(
      label = "Bivariate Plots of two long datasets",
      dataname = c("ASL", "ADRS", "ADTTE"),
      x = data_extract_spec(
        dataname = "ADRS",
        columns = columns_spec(
          choices = c("AVAL", "AVALC"),
          selected = "AVAL",
          multiple = FALSE,
          fixed = FALSE
        ),
        filter = filter_spec(
          vars = c("PARAMCD", "AVISIT"),
          choices = apply(expand.grid(unique(ADRS$PARAMCD), unique(ADRS$AVISIT)),
                          1, paste, collapse = " - "),
          selected = "OVRINV - Screening",
          multiple = TRUE,
          label = "ADRS filter"
        )
      ),
      y = data_extract_spec(
        dataname = "ADTTE",
        columns = columns_spec(
          choices = c("AVAL", "CNSR"),
          selected = "AVAL",
          multiple = FALSE,
          fixed = FALSE
        ),
        filter = filter_spec(
          vars = c("PARAMCD"),
          choices = unique(ADTTE$PARAMCD),
          selected = "OS",
          multiple = FALSE,
          label = "ADTTE filter"
        )
      ),
      row_facet = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(
          choices = c("SEX", "RACE"),
          selected = NULL,
          multiple = TRUE,
          fixed = FALSE,
          label = "variable"
        )
      ),
      col_facet = data_extract_spec(
        dataname = "ASL",
        columns = columns_spec(
          choices = c("SEX", "RACE"),
          selected = NULL,
          multiple = TRUE,
          fixed = FALSE,
          label = "variable"
        )
      ),
      expert_settings = TRUE,
      plot_height = c(600, 200, 2000),
      ggtheme = "grey"
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}

# datasets: different subsets of long dataset

library(random.cdisc.data)
library(tern)

ASL <- cadsl
ADLB <- cadlb

keys(ASL) <- c("STUDYID", "USUBJID")
keys(ADLB) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")

app <- teal::init(
  data = cdisc_data(
    ASL = ASL,
    ADLB = ADLB,
    code = 'ASL <- cadsl
            ADLB <- cadlb
            keys(ASL) <- c("STUDYID", "USUBJID")
            keys(ADLB) <- c("STUDYID", "USUBJID", "PARAMCD", "AVISIT")',
    check = FALSE),
  modules = root_modules(
    tm_g_bivariate(
      dataname = "ADLB",
      x = data_extract_spec(
        dataname = "ADLB",
        filter = list(
          filter_spec(
            vars = "PARAMCD",
            choices = levels(ADLB$PARAMCD),
            selected = levels(ADLB$PARAMCD)[1],
            multiple = FALSE,
            label = "Choose endpoint"
          ),
          filter_spec(
            vars = "STRATA1",
            choices = levels(ADLB$STRATA1),
            selected = levels(ADLB$STRATA1)[1],
            multiple = FALSE,
            label = "Choose category"
          )
        ),
        columns = columns_spec(
          choices = c("AVISIT", "AVISITN"),
          selected = c("AVISIT"),
          multiple = FALSE,
          fixed = FALSE,
          label = "Variable"
        )
      ),
      y = data_extract_spec(
        dataname = "ADLB",
        filter = list(
          filter_spec(
            vars = "PARAMCD",
            choices = levels(ADLB$PARAMCD),
            selected = levels(ADLB$PARAMCD)[1],
            multiple = FALSE,
            label = "Choose endpoint"
          ),
          filter_spec(
            vars = "STRATA1",
            choices = levels(ADLB$STRATA1),
            selected = levels(ADLB$STRATA1)[1],
            multiple = FALSE,
            label = "Choose category"
          )
        ),
        columns = columns_spec(
          choices = c("AVAL", "CHG"),
          selected = "AVAL",
          multiple = FALSE,
          fixed = FALSE,
          label = "Variable"
        )
      ),
      use_density = FALSE,
      row_facet = data_extract_spec(
        dataname = "ADLB",
        filter = list(
          filter_spec(
            vars = "PARAMCD",
            choices = levels(ADLB$PARAMCD),
            selected = levels(ADLB$PARAMCD)[1],
            multiple = FALSE,
            label = "Choose endpoint"
          ),
          filter_spec(
            vars = "STRATA1",
            choices = levels(ADLB$STRATA1),
            selected = levels(ADLB$STRATA1)[1],
            multiple = FALSE,
            label = "Choose category"
          )
        ),
        columns = columns_spec(
          choices = c("","RACE", "SEX", "ARMCD", "ACTARMCD"),
          selected = "",
          multiple = TRUE,
          fixed = FALSE,
          label = "Facetting variable"
        )
      ),
      col_facet = data_extract_spec(
        dataname = "ADLB",
        filter = list(
          filter_spec(
            vars = "PARAMCD",
            choices = levels(ADLB$PARAMCD),
            selected = levels(ADLB$PARAMCD)[1],
            multiple = FALSE,
            label = "Choose endpoint"
          ),
          filter_spec(
            vars = "STRATA1",
            choices = levels(ADLB$STRATA1),
            selected = levels(ADLB$STRATA1)[1],
            multiple = FALSE,
            label = "Choose category"
          )
        ),
        columns = columns_spec(
          choices = c("","RACE", "SEX", "ARMCD", "ACTARMCD"),
          selected = "",
          multiple = TRUE,
          fixed = FALSE,
          label = "Facetting variable"
        )
      ),
      expert_settings = TRUE,
      plot_height = c(600, 200, 2000),
      ggtheme = "grey"
    )
  )
)

\dontrun{
shinyApp(app$ui, app$server)
}
}
