% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_g_bivariate.R
\name{tm_g_bivariate}
\alias{tm_g_bivariate}
\title{Univariate and bivariate visualizations.}
\usage{
tm_g_bivariate(label = "Bivariate Plots", dataname, xvar, yvar,
  use_density = FALSE, row_facet_var, col_facet_var,
  expert_settings = TRUE, colour_var = list(), fill_var = list(),
  size_var = list(), free_x_scales = FALSE, free_y_scales = FALSE,
  plot_height = c(600, 200, 2000), ggtheme = "minimal",
  with_show_r_code = TRUE, pre_output = NULL, post_output = NULL)
}
\arguments{
\item{label}{(\code{character}) Label of the module}

\item{dataname}{(\code{character}) name of datasets used to generate the bivariate plot. You need
to name all datasets used in the available \code{data_extract_spec}}

\item{xvar}{(\code{list} of \code{data_extract_spec}) Variable name selected to plot along the x-axis by default.
Variable can be numeric, factor or character. No empty selections are allowed!}

\item{yvar}{(\code{list} of \code{data_extract_spec}) Variable name selected to plot along the y-axis by default.
Variable can be numeric, factor or character.}

\item{use_density}{(\code{logical}) value for whether density (\code{TRUE}) is plotted or frequency (\code{FALSE})}

\item{row_facet_var}{(\code{list} of \code{data_extract_spec}) variable for row facetting}

\item{col_facet_var}{(\code{list} of \code{data_extract_spec}) variable for col facetting}

\item{expert_settings}{(\code{logical}) Whether coloring, filling and size should be chosen
by the user}

\item{colour_var}{(\code{list} of \code{data_extract_spec}) Variable selection for the colouring
inside the expert settings}

\item{fill_var}{(\code{list} of \code{data_extract_spec}) Variable selection for the filling
inside the expert settings}

\item{size_var}{(\code{list} of \code{data_extract_spec}) Variable selection for the size of \code{geom_point}
plots inside the expert settings}

\item{free_x_scales}{(\code{logical}) If X scaling shall be changeable}

\item{free_y_scales}{(\code{logical}) If Y scaling shall be changeable}

\item{plot_height}{(\code{numeric}) \code{c(value, min and max)} of plot height slider}

\item{ggtheme}{(\code{character}) ggplot theme to be used by default. All themes can be chosen by the user.}

\item{with_show_r_code}{(\code{logical}) Whether show R code button shall be shown}

\item{pre_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}

\item{post_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}
}
\description{
Univariate and bivariate visualizations.
}
\details{
This is a general module to visualize 1 & 2 dimensional data.
}
\examples{
library(random.cdisc.data)

ASL <- radsl(seed = 1)
ARS <- radrs(ASL, seed = 1)

tern::keys(ASL) <- c("USUBJID", "STUDYID")
tern::keys(ARS) <- c("USUBJID", "STUDYID")

ars_filters <- filter_spec(
    vars = c("PARAMCD"),
    sep = " - ",
    choices = unique(ARS$PARAMCD),
    selected = unique(ARS$PARAMCD)[1],
    multiple = FALSE,
    label = "Choose endpoint and Censor"
)
ars_extracted_response <- data_extract_spec(
    dataname = "ARS",
    filter = ars_filters,
    columns = columns_spec(
        choices = base::setdiff(names(ARS), tern::keys(ARS)),
        selected = names(ARS)[5],
        multiple = FALSE,
        fixed = FALSE,
        label = "variable"
    )
)
asl_extracted <- data_extract_spec(
    dataname = "ASL",
    columns = columns_spec(
        choices = c("", base::setdiff(names(ASL), tern::keys(ASL))),
        selected = c("RACE"),
        multiple = FALSE,
        fixed = FALSE
    )
)
asl_extracted_row <- data_extract_spec(
    dataname = "ASL",
    columns = columns_spec(
        choices = c("","SEX", "AGE"),
        selected = "",
        multiple = FALSE,
        fixed = FALSE
    )
)

app <- teal::init(
 data = cdisc_data(
   ASL = ASL,
   ARS = ARS,
   code = 'ASL <- random.cdisc.data::radsl(seed = 1)
           ARS <- random.cdisc.data::radrs(ASL, seed = 1)
           tern::keys(ASL) <- c("USUBJID", "STUDYID")
           tern::keys(ARS) <- c("USUBJID", "STUDYID")',
   check = FALSE),
 modules = root_modules(
   tm_g_bivariate(
     dataname = c("ASL","ARS"),
     xvar = list(ars_extracted_response),
     yvar = list(asl_extracted),
     use_density = FALSE,
     row_facet_var = list(asl_extracted_row),
     col_facet_var = list(asl_extracted_row),
     expert_settings = TRUE,
     plot_height = c(600, 200, 2000),
     ggtheme = "grey"
   )
 )
)
\dontrun{
shinyApp(app$ui, app$server)
}


}
